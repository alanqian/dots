Digest::MD5.digest('Linode: qian').each_byte { |e| a.push (e & 0x7f) }
Digest::MD5.digest('Linode: qian').each_byte { |e| a.push (e & 0x7f) | 0x1f }
a.map { |a| chr(a).to_s }
a.map { |a| a.to_c }
a.map { |a| a.to_s }
a.map { |a| a.chr }
a.clear
Digest::MD5.digest('Linode: qian').each_byte do |e|
e = e & 0x7f
e = 0x21 if e < 0x20
a.push e.chr
a
a.join("")
q
s = %q{w)%(8\}\+7"v%k']R}
}
s = %q(w%(8\}\+7"v%k']R)
s = %q(w%(8\}\+7"v%k\']R)
s = %q(w%(8\}\+7"v%k'']R)
s = %q(w%\(8\}\+7"v%k'']R)
'
)
require 'yaml'
YAML.load("config/database.yml")
yml = YAML.load("config/database.yml")
yml
yml.to_s
yml.to_json 
y = YAML::load(File.read('config/database.yml'))
y["production"]["password"]
plan.auto_position
plan = Plan.find(39); plan.output_to_pdf
plan = Plan.first
products = Product.under("8001")
products.each do |p|
size[3] = [p.height, p.width, p.depth].sort
puts size
end
ps = PlanSet.last
ps.plans
p = ps.plans.first
p = Plan.last
p.positions
plan = Plan.last
plan.output_to_pdf
plan
reload!; plan = Plan.last; plan.output_to_pdf
OpenStruct.new(x: 1, y: 2)
t = OpenStruct.new(x: 1, y: 2)
t.x
t.y 
plan = Plan.find(39)
plan.category_id
plan.get_summary(:brand)
s.map { |b| b.run }
s = plan.get_summary(:brand)
Plan.where(store_id: 10011)
Plan.where(store_id: 10011).size
Category.name_dict
a = category.tree.to_json
a = Category.tree.to_json
reload!
b = Category.tree_ex.to_json
reload!; b = Category.tree_ex.to_json
reload!; b = Category.tree.to_s
reload!; b = Category.tree.to_json
s = OpenShelf.first
bay = Bay.find(306)
bay.save
plan.on_shelves.select(:name, :image_file)
Plan.count
reload!; I18n.t("import_samples")
reload!; I18n.t("import_samples.sale")
reload!; I18n.t("import_samples.salex")
I18n.t("import_samples.salex", '')
I18n.t("import_samples")['']
y["production"]["password"][11]
y["production"]["password"][12]
y["production"]["password"][13]
StoreBay.all
PlanSet.first
PlanSet.count
Plan.delete_all
ps.plans.delete(p)
ps.plans.size
ps = PlanSet.first
I18n.t("dict.merch_styles")
I18n.t("dict.merch_styles.stack")
h.reject :a
h.except :a
h.except! :a
h.except! :c
h.except! :c, :d
p = Product.find_by(code: "111")
puts Digets::MD5.hexdigest("123")
puts Digest::MD5.hexdigest("123")
puts Digest::MD5.hexdigest("123").class
"123".to_i
"123a".to_i
"123ab".to_i
4Digest::MD5.digest("test")
Digest::MD5.digest("test")
Digest::MD5.digest("test").class
Digest::MD5.hexdigest("test")
Digest::MD5.digest("test").to_i
Digest::MD5.digest("test").to_f
Digest::MD5.digest("test2")
Digest::MD5.digest("test2").size
Digest::MD5.hexdigest("test").to_i(16)
ImportSheet.@@dict
ImportProduct.@@dict
ImportProduct.dict
I18n.t("import_samples")
"#{bay.code} 第#{shelf.layer}层, 孔号: #{shelf.notch_num} 深度: #{shelf.depth}"
s = '#{bay.code} 第#{shelf.layer}层, 孔号: #{shelf.notch_num} 深度: #{shelf.depth}'
s.template(bay: Bay.first, shelf: OpenShelf.first)
s.template(bay: Bay.last, shelf: OpenShelf.first)
exit
reload!; plan = Plan.find(39); plan.output_to_pdf
y["production"]["password"].size
y["production"]["password"][0]
y["production"]["password"][1]
y["production"]["password"][2]
y["production"]["password"][10]
y["production"]["password"][6]
y["production"]["password"][7]
y["production"]["password"][8]
y["production"]["password"][9]
Plan.first
plan.store_bays
plan = Plan.find(36)
plan = Plan.find(36); plan.output_to_pdf
plan = Plan.last; plan.output_to_pdf
C1
bay = Bay.first
bay.layers.first
plan.id
require 'digest/md5'
Digest::MD5('linode: qian')
Digest::MD5.digest('Linode: qian')
Digest::MD5.digest('Linode: qian').size
Digest::MD5.digest('Linode: qian').each { |e| puts e }
Digest::MD5.digest('Linode: qian').eachchar { |e| puts e }
Digest::MD5.digest('Linode: qian').each_byte { |e| puts e }
Digest::MD5.digest('Linode: qian').each_byte { |e| a.push e }
a = []
PlansController.edit_plan_path(11)
ApplicationController.helpers.edit_plan_path 11
PlansController.helpers.edit_plan_path 11
app.edit_plan_path 11
app.edit_plan_path 11, _do: "abc"
StoreBay.fixtures('1122')
# session stop: 2013-12-18 22:44:27 +0800
# session start: 2013-12-18 22:44:31 +0800
# session start: 2013-12-15 23:29:20 +0800
# session stop: 2013-12-15 23:44:03 +0800
# session start: 2013-12-16 10:13:03 +0800
# session stop: 2013-12-16 10:13:20 +0800
# session start: 2013-12-16 10:17:17 +0800
# session stop: 2013-11-02 21:51:59 +0800
# session start: 2013-11-02 22:10:14 +0800
# session stop: 2013-11-02 22:10:29 +0800
# session start: 2013-11-02 22:12:05 +0800
# session stop: 2013-11-20 21:49:23 +0800
# session stop: 2013-12-10 15:01:00 +0800
# session start: 2013-12-10 15:02:15 +0800
# session start: 2013-11-21 11:19:54 +0800
# session stop: 2013-11-21 15:57:53 +0800
# session start: 2013-11-21 15:57:58 +0800
# session stop: 2013-11-20 13:55:32 +0800
# session start: 2013-11-20 20:59:01 +0800
# session stop: 2013-11-21 11:59:45 +0800
# session start: 2013-11-21 14:32:22 +0800
# session stop: 2013-11-19 14:54:26 +0800
# session start: 2013-11-19 15:00:54 +0800
# session start: 2013-12-02 20:44:36 +0800
# session stop: 2013-11-02 21:49:06 +0800
# session start: 2013-11-02 21:50:37 +0800
# session stop: 2013-12-16 10:22:09 +0800
# session stop: 2013-12-19 10:14:26 +0800
# session start: 2013-12-19 10:14:31 +0800
# session stop: 2013-12-19 10:22:22 +0800
# session start: 2013-12-19 10:22:26 +0800
# session stop: 2013-12-19 23:45:45 +0800

# session start: 2013-12-19 23:48:15 +0800
# session start: 2013-12-16 10:26:23 +0800
# session stop: 2013-12-18 22:49:16 +0800
# session start: 2013-12-19 09:44:19 +0800
# session stop: 2013-12-19 09:54:12 +0800
# session start: 2013-12-19 09:54:17 +0800
# session start: 2013-12-18 20:46:16 +0800
# session stop: 2013-12-12 21:31:18 +0800
# session stop: 2013-12-16 10:30:54 +0800
# session start: 2013-12-16 10:42:43 +0800
# session stop: 2013-12-16 18:42:48 +0800
# session start: 2013-12-17 08:47:22 +0800
# session stop: 2013-12-17 22:57:55 +0800
# session start: 2013-12-18 09:42:40 +0800
# session stop: 2013-11-19 15:01:21 +0800
# session start: 2013-11-19 18:11:38 +0800
# session start: 2013-11-16 09:03:52 +0800
# session start: 2013-10-31 21:48:52 +0800
# session stop: 2013-11-11 19:38:55 +0800
# session start: 2013-11-11 19:38:59 +0800
# session stop: 2013-11-01 11:42:13 +0800
# session start: 2013-11-01 11:42:17 +0800
# session stop: 2013-11-01 11:50:31 +0800
# session start: 2013-11-01 11:50:35 +0800
# session stop: 2013-11-04 14:34:42 +0800
# session start: 2013-11-04 14:35:51 +0800
# session stop: 2013-11-13 09:39:10 +0800
# session start: 2013-11-13 10:23:34 +0800
# session stop: 2013-11-15 15:58:07 +0800
# session start: 2013-11-15 15:59:42 +0800
# session stop: 2013-11-19 18:23:12 +0800
# session start: 2013-11-19 19:14:39 +0800
# session stop: 2013-11-19 19:24:27 +0800
# session start: 2013-11-19 19:56:52 +0800
# session stop: 2013-12-11 18:11:16 +0800
# session start: 2013-12-11 18:11:20 +0800
# session stop: 2013-12-12 00:33:00 +0800
# session start: 2013-12-12 09:03:43 +0800
# session stop: 2013-12-19 09:57:33 +0800
# session start: 2013-12-19 09:57:36 +0800
# session stop: 2013-12-19 10:09:35 +0800
# session start: 2013-12-19 10:09:39 +0800
# session stop: 2013-12-19 23:48:26 +0800
# session start: 2013-12-20 09:29:09 +0800
# session stop: 2013-12-20 10:19:58 +0800
# session start: 2013-12-21 10:14:32 +0800
# session stop: 2013-12-22 01:04:38 +0800
# session start: 2013-12-22 10:33:24 +0800
# session stop: 2013-12-22 11:57:13 +0800
# session start: 2013-12-24 10:54:36 +0800
# session stop: 2013-12-24 10:55:16 +0800
# session start: 2013-12-24 10:59:19 +0800
# session stop: 2013-12-24 10:59:30 +0800
# session start: 2013-12-24 10:59:43 +0800
StoreBay.first
# session stop: 2013-12-24 10:59:56 +0800

# session start: 2013-12-24 11:24:13 +0800
plan = Plan.find(42)
plan.verify_fixture 
plan.empty? 
plan = Plan.find(42)
plan.empty? 
plan.product_version
Product.version 
# session stop: 2013-12-24 11:43:45 +0800

