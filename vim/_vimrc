"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Maintainer: qianguoxiang@snda.com
"             msn: alanqian@sina.com
"
" Version: 2.0 - May 21, 2011
"
" References:
"    http://amix.dk/blog/post/19486#The-ultimate-vim-configuration-vimrc
"    http://easwy.com/blog/archives/advanced-vim-skills-catalog/
"    http://amix.dk/vim/vimrc.html
"    http://amix.dk/vim/vimrc.txt
"    http://easwy.com/blog/uploads/vim/advanced_vim_skills_html.zip
"
"    Thanks to above guys and my friend, Huang Hui.
"
" Install:
"    $ tar xjf vimrc.tar.bz2
"    $ cat ~/.vim_runtime/install.sh
"    $ sh ~/.vim_runtime/install.sh linux
"
" Sections:
"    -> General
"    -> VIM user interface
"    -> Colors and Fonts
"    -> Files and backups
"    -> Text, tab and indent related
"    -> Visual mode related
"    -> Command mode related
"    -> Moving around, tabs and buffers
"    -> Statusline
"    -> Parenthesis/bracket expanding
"    -> General Abbrevs
"    -> Editing mappings
"
"    -> Cope
"    -> Omni complete functions
"    -> Spell checking
"    -> C++ Section
"    -> Python section
"    -> JavaScript section
"
" Plugins_installed:
"     > ctags
"     > taglist
"     > omnicppcomplete
"       [info] :help omnicppcomplete
"     > cscope
"     > stlrefvim
"     > DoxygenToolKit
"     > format.vim
"       for multibyte text paragraph formating;
"     > snipMate.vim - http://www.vim.org/scripts/script.php?script_id=2540
"       Snippets for many languages (similar to TextMate's):
"           info -> :help snipMate
"
"     > mru.vim - http://www.vim.org/scripts/script.php?script_id=521
"       Plugin to manage Most Recently Used (MRU) files:
"           info -> :e ~/.vim_runtime/plugin/mru.vim
"
"
" Plugins_for_amix:
"     > minibufexpl.vim - http://www.vim.org/scripts/script.php?script_id=159
"       Makes it easy to get an overview of buffers:
"           info -> :e ~/.vim_runtime/plugin/minibufexpl.vim
"
"     > bufexplorer - http://www.vim.org/scripts/script.php?script_id=42
"       Makes it easy to switch between buffers:
"           info -> :help bufExplorer
"
"     > yankring.vim - http://www.vim.org/scripts/script.php?script_id=1234
"       Emacs's killring, useful when using the clipboard:
"           info -> :help yankring
"
"     > surround.vim - http://www.vim.org/scripts/script.php?script_id=1697
"       Makes it easy to work with surrounding text:
"           info -> :help surround
"
"     > snipMate.vim - http://www.vim.org/scripts/script.php?script_id=2540
"       Snippets for many languages (similar to TextMate's):
"           info -> :help snipMate
"
"     > mru.vim - http://www.vim.org/scripts/script.php?script_id=521
"       Plugin to manage Most Recently Used (MRU) files:
"           info -> :e ~/.vim_runtime/plugin/mru.vim
"
"     > Command-T - http://www.vim.org/scripts/script.php?script_id=3025
"       Command-T plug-in provides an extremely fast, intuitive mechanism for opening filesa:
"           info -> :help CommandT
"           screencast and web-help -> http://amix.dk/blog/post/19501
"
"
"  Revisions:
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sets how many lines of history VIM has to remember
set history=512

" Enable filetype plugin
filetype on
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = ","
let g:mapleader = ","

" Fast saving
nmap <leader>w :w!<cr>
" Fast editing of the .vimrc
map <leader>rc :tabe! /home/dots/vim/_vimrc<cr>

" map <leader>r to run current editing script
"map <leader>r :!perl '%:p'<cr>
map <leader>p :!perl -c '%:p'<cr>
map <leader>t <esc>^f=dwd^f;i = <esc>p

" When _vimrc is edited, reload it
autocmd! bufwritepost /home/dots/vim/_vimrc source /home/dots/vim/_vimrc
" trim trail space before save
autocmd bufwritepre * :%s/\s\+$//e

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the curors - when moving vertical..
set scrolloff=4

set wildmenu "Turn on WiLd menu

set ruler "Always show current position

set cmdheight=2 "The commandbar height

set hid "Change buffer - without saving

" Set backspace config
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

set ignorecase "Ignore case when searching
set smartcase

set hlsearch "Highlight search things
set incsearch "Make search act like search in modern browsers

set nolazyredraw "Don't redraw while executing macros

set magic "Set magic on, for regular expressions

set showmatch "Show matching bracets when text indicator is over them
set mat=2 "How many tenths of a second to blink

" No sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" remeber last cursor position
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syntax enable "Enable syntax hl

" Set font according to system
if MySys() == "mac"
  set gfn=Menlo:h14
  set shell=/bin/bash
elseif MySys() == "windows"
  set gfn=Monaco:h12
elseif MySys() == "linux"
  set gfn=Monospace\ 12
  set shell=/bin/bash
endif

"color scheme
if has("gui_running")
  set guioptions-=T
  set t_Co=256
  set background=dark
  colorscheme peaksea
  set lines=57 columns=100
  winpos 4 24
  set nomousehide
  imap <C-S-V> <ESC>l"+gPi
else
  set background=dark
  "colorscheme peachpuff " peaksea pablo pyte zellner
  colorscheme desert
  " Hide the mouse pointer while typing
  set mousehide
endif

hi TabLine term=standout cterm=standout ctermfg=0 ctermbg=7

"set encoding=cp936
"set termencoding=iso8859
set encoding=utf8
set fileencodings=utf-8,cp936,ucs-bom "Support files both in unicode & GBK
" :e ++enc=cp936 to reload file in cp936 encodings

try
    lang en_US
catch
endtry

set ffs=unix,dos,mac "Default file types

function! SetLogfileColor()
    " Set nice colors
    " background for normal text is light grey
    " Text below the last line is darker grey
    " Cursor is green
    " Constants are not underlined but have a slightly lighter background
    highlight Normal guibg=grey90
    highlight Cursor guibg=Green guifg=NONE
    highlight NonText guibg=grey80
    highlight Constant gui=NONE guibg=grey95
    highlight Special gui=NONE guibg=grey95
    highlight Comment term=bold ctermfg=6
    highlight Search NONE
    highlight Search term=reverse cterm=reverse

    " For view log files
    highlight CursorLine term=standout cterm=standout ctermfg=4 ctermbg=7
    highlight PreProc term=underline cterm=bold ctermfg=8
    highlight TabLine term=underline ctermfg=0 ctermbg=7
    highlight TabLineSel term=underline cterm=bold ctermfg=7 ctermbg=0
    highlight TabLineFill term=underline ctermfg=7 ctermbg=1
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git anyway...
set nobackup
set nowb
set noswapfile

"Persistent undo
"try
"    if MySys() == "windows"
"      set undodir=C:\Windows\Temp
"    else
"      set undodir=~/tmp/undodir
"    endif
"
"    set undofile
"catch
"endtry

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set expandtab
set shiftwidth=2
set tabstop=2
set smarttab
set expandtab

"set linebreak
"set foldmethod=indent
set tw=86

set noai "Auto indent
set si "Smart indet
set nowrap

set nocp "nocompatible
set nu


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Visual mode related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Really useful!
"  In visual mode when you press * or # to search for the current selection
vnoremap <silent> * :call VisualSearch('f')<CR>
vnoremap <silent> # :call VisualSearch('b')<CR>

" When you press gv you vimgrep after the selected text
vnoremap <silent> gv :call VisualSearch('gv')<CR>
map <leader>g :vimgrep // **/*.<left><left><left><left><left><left><left>

function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

" From an idea by Michael Naumann
function! VisualSearch(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Command mode related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Smart mappings on the command line
cno $h e ~/
cno $d e ~/Desktop/
cno $j e ./
cno $c e <C-\>eCurrentFileDir("e")<cr>

" $q is super useful when browsing on the command line
cno $q <C-\>eDeleteTillSlash()<cr>

" Bash like keys for the command line
cnoremap <C-A>		<Home>
cnoremap <C-E>		<End>
"cnoremap <C-K>		<C-U>
cmap <C-P>      <Up>
cmap <C-N>      <Down>
cmap <S-Insert> <C-R>+

" Useful with Chinese IME
nnoremap ： :
nnoremap 、 /
nnoremap × *
nnoremap # #
nnoremap …… ^
nnoremap ￥ $
nnoremap 《 <
nnoremap 》 >

" Useful on some European keyboards
"map ½ $
"imap ½ $
"vmap ½ $
"cmap ½ $


func! Cwd()
  let cwd = getcwd()
  return "e " . cwd
endfunc

func! DeleteTillSlash()
  let g:cmd = getcmdline()
  if MySys() == "linux" || MySys() == "mac"
    let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*", "\\1", "")
  else
    let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\]\\).*", "\\1", "")
  endif
  if g:cmd == g:cmd_edited
    if MySys() == "linux" || MySys() == "mac"
      let g:cmd_edited = substitute(g:cmd, "\\(.*\[/\]\\).*/", "\\1", "")
    else
      let g:cmd_edited = substitute(g:cmd, "\\(.*\[\\\\\]\\).*\[\\\\\]", "\\1", "")
    endif
  endif
  return g:cmd_edited
endfunc

func! CurrentFileDir(cmd)
  return a:cmd . " " . expand("%:p:h") . "/"
endfunc


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Map space to / (search) and c-space to ? (backgwards search)
map <space> /
map <c-space> ?
map <silent> <leader><cr> :noh<cr>

" Smart way to move btw. windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Close the current buffer
map <leader>bd :Bclose<cr>

" Close all the buffers
map <leader>ba :1,300 bd!<cr>

" Use the arrows to something usefull
map <right> :bn<cr>
map <left> :bp<cr>

" Tab configuration
map <leader>e :tabe
"map <leader>tn :tabnew<cr>
"map <leader>te :tabedit
"map <leader>tc :tabclose<cr>
"map <leader>tm :tabmove

" When pressing <leader>cd switch to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>


command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

" Specify the behavior when switching between buffers
try
  set switchbuf=usetab
  set stal=2
catch
endtry


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Statusline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Always hide the statusline
set laststatus=2

" Format the statusline
"set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{CurDir()}%h\ \ \ Line:\ %l/%L:%c


function! CurDir()
    let curdir = substitute(getcwd(), '/Users/amir/', "~/", "g")
    return curdir
endfunction

function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    else
        return ''
    endif
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Parenthesis/bracket expanding
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"vnoremap $1 <esc>`>a)<esc>`<i(<esc>
"vnoremap $2 <esc>`>a]<esc>`<i[<esc>
"vnoremap $3 <esc>`>a}<esc>`<i{<esc>
"vnoremap $$ <esc>`>a"<esc>`<i"<esc>
"vnoremap $q <esc>`>a'<esc>`<i'<esc>
"vnoremap $e <esc>`>a"<esc>`<i"<esc>
"
"" Map auto complete of (, ", ', [
"inoremap $1 ()<esc>i
"inoremap $2 []<esc>i
"inoremap $3 {}<esc>i
"inoremap $4 {<esc>o}<esc>O
"inoremap $q ''<esc>i
"inoremap $e ""<esc>i
"inoremap $t <><esc>i

"inoremap <A-b> <C-o>b
"inoremap <A-f> <C-o>w
"inoremap <C-p> <C-o>k
"inoremap <C-n> <C-o>j
"inoremap <C-h> <C-o>h
"inoremap <A-j> <C-o>j
"inoremap <A-l> <C-o>l

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General Abbrevs
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"iab xdate <c-r>=strftime("%d/%m/%y %H:%M:%S")<cr>
iab xdate <c-r>=strftime("%b %d, %Y")<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"gnome-terminal bugs for Shift-F1 ~ Shift-F4
map <Esc>O1;2P <S-F1>
map <Esc>O1;2Q <S-F2>
map <Esc>O1;2R <S-F3>
map <Esc>O1;2S <S-F4>
map <Esc>O1;5P <C-F1>
map <Esc>O1;5Q <C-F2>
map <Esc>O1;5R <C-F3>
map <Esc>O1;5S <C-F4>


"switch between TABs
set switchbuf=usetab,newtab
nmap <Tab> :tabn<CR>
nmap <S-Tab> :tabN<CR>

"nmap <leader>t :s/\v<(.)(\w*)/\u\1\L\2/g<CR>let @/=""<CR>

"set cursorline
"nnoremap <C-N> :set cursorline<CR>

"redefine SPACE
nmap <SPACE> 2][%
vmap <SPACE> 2][%

"Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
if MySys() == "mac"
    nmap <M-j> mz:m+<cr>`z
    nmap <M-k> mz:m-2<cr>`z
    vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
    vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z
    nmap <D-j> <M-j>
    nmap <D-k> <M-k>
    vmap <D-j> <M-j>
    vmap <D-k> <M-k>
endif

"Delete trailing white space, useful for Python, C/C++, Perl, etc
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

au BufWrite *.py :call DeleteTrailingWS()
au BufWrite *.h :call DeleteTrailingWS()
au BufWrite *.c :call DeleteTrailingWS()
au BufWrite *.cpp :call DeleteTrailingWS()
au BufWrite *.pl :call DeleteTrailingWS()
au BufWrite *.rb :call DeleteTrailingWS()

"set guitablabel=%t


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Cope
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Do :help cope if you are unsure what cope is. It's super useful!
map <leader>cc :botright cope<cr>
map <leader>n :cn<cr>
map <leader>p :cp<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Omni complete functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
" 1. Whole lines                                |i_CTRL-X_CTRL-L|
" 2. keywords in the current file               |i_CTRL-X_CTRL-N|
" 3. keywords in 'dictionary'                   |i_CTRL-X_CTRL-K|
" 4. keywords in 'thesaurus', thesaurus-style   |i_CTRL-X_CTRL-T|
" 5. keywords in the current and included files |i_CTRL-X_CTRL-I|
" 6. tags                                       |i_CTRL-X_CTRL-]|
" 7. file names                                 |i_CTRL-X_CTRL-F|
" 8. definitions or macros                      |i_CTRL-X_CTRL-D|
" 9. Vim command-line                           |i_CTRL-X_CTRL-V|
"10. User defined completion                    |i_CTRL-X_CTRL-U|
"11. omni completion                            |i_CTRL-X_CTRL-O|
"12. Spelling suggestions                       |i_CTRL-X_s|
"13. keywords in 'complete'                     |i_CTRL-N|


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

"Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=

au BufReadPost *.txt setlocal wrap
au BufReadPost *.log setlocal wrap

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => C++ Section
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
au FileType c,cpp,h set noundofile
au FileType c,cpp,h set formatoptions=croqt cindent comments=sr:/*,mb:*,ex:*/,://
set formatoptions+=mM
set cinoptions=:0g0t0(sus
set completeopt=longest,menu

set makeprg=make\ -j
let Grep_Skip_Dirs = 'RCS CVS SCCS .svn generated'
set grepprg=egrep\ -n\ $*\ /dev/null

"set path+=$dpf/df-lib/include,$dpf/df-api/include,$dpf/df-common/include,$dpf/dt-api/include,
"set path+=../include
set path+=/usr/include/c++/4.5

"set efm to correct g++ 4.5.x prompt & ld prompt
au FileType c,cpp set efm=%+GIn\ file\ included\ from\ %m,%+Gcollect2:\ %m,%f%l:\ %m,%f:%l:%c:\ %m,%f:%l:\ %m
au BufReadPost quickfix  setlocal wrap

"quickfix shortcuts: next/previous error

set pastetoggle=<C-F11>
map <F4> :cn<cr>
map <S-F4> :cp<cr>

map <C-F4> <Esc>:tn<cr>
map <C-F3> <Esc>:tp<cr>
map \ /#####<cr>

imap <C-A> <Home>
imap <C-E> <End>
imap <C-F> <C-Right>
imap <C-W> <C-Right>
imap <C-B> <C-Left>

"" exec 'ab ASSERT CPPUNIT_ASSERT_MESSAGE'
"" exec 'ab FAIL CPPUNIT_FAIL'
"" exec 'ab EQUAL CPPUNIT_ASSERT_EQUAL_MESSAGE'
"" exec 'ab DOUBLES_EQUAL CPPUNIT_ASSERT_DOUBLES_EQUAL'
"" exec 'ab WARNING, USR_WRITE_LOG_US(UL_LOG_WARNING,'
"" exec 'ab TRACE, USR_WRITE_LOG_US(UL_LOG_TRACE,'
"" exec 'ab DEBUG, USR_WRITE_LOG_US(UL_LOG_DEBUG,'
"" exec 'ab FATAL, USR_WRITE_LOG_US(UL_LOG_FATAL,'
"" exec 'ab NOTICE DTS_WRITE_NOTICE_LOG('
exec 'ab TRACE( LOG4CXX_TRACE(logger, format('
exec 'ab DEBUG( LOG4CXX_DEBUG(logger, format('
exec 'ab INFO( LOG4CXX_INFO(logger, format('
exec 'ab WARN( LOG4CXX_WARN(logger, format('
exec 'ab ERROR( LOG4CXX_ERROR(logger, format('
exec 'ab FATAL( LOG4CXX_FATAL(logger, format('

"source ~/.vim_runtime/template/code_template.vim
"au BufNewFile *.c,*.cpp,*.h  call Read_templ("~/template/code_header.tpl")
"au BufNewFile test_*.c,test_*.cpp call Read_templ("~/template/test_cpp.tpl")
"au BufNewFile *.h call Read_templ("~/template/include_define.tpl")
"au BufNewFile journal_*.txt call Read_templ("~/template/journal_txt.tpl")

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Python section
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let python_highlight_all = 1
au FileType python syn keyword pythonDecorator True None False self

au BufNewFile,BufRead *.jinja set syntax=htmljinja
au BufNewFile,BufRead *.mako set ft=mako

au FileType python inoremap <buffer> $r return
au FileType python inoremap <buffer> $i import
au FileType python inoremap <buffer> $p print
au FileType python inoremap <buffer> $f #--- PH ----------------------------------------------<esc>FP2xi
au FileType python map <buffer> <leader>1 /class
au FileType python map <buffer> <leader>2 /def
au FileType python map <buffer> <leader>C ?class
au FileType python map <buffer> <leader>D ?def


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => JavaScript section
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
au FileType javascript call JavaScriptFold()
au FileType javascript setl fen
au FileType javascript setl nocindent

au FileType javascript imap <c-t> AJS.log();<esc>hi
au FileType javascript imap <c-a> alert();<esc>hi

au FileType javascript inoremap <buffer> $r return
au FileType javascript inoremap <buffer> $f //--- PH ----------------------------------------------<esc>FP2xi

function! JavaScriptFold()
    setl foldmethod=syntax
    setl foldlevelstart=1
    syn region foldBraces start=/{/ end=/}/ transparent fold keepend extend

    function! FoldText()
    return substitute(getline(v:foldstart), '{.*', '{...}', '')
    endfunction
    setl foldtext=FoldText()
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => MISC
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

"Quickly open a buffer for scripbble
map <leader>q :e ~/buffer<cr>
au BufRead,BufNewFile ~/buffer iab <buffer> xh1 ===========================================

map <leader>pp :setlocal paste!<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => MRU plugin
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let MRU_Max_Entries = 32
map <leader>f :MRU<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Command-T
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"let g:CommandTMaxHeight = 15
"set wildignore+=*.o,*.obj,.git,*.pyc
"noremap <leader>j :CommandT<cr>
"noremap <leader>y :CommandTFlush<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => ctags
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <C-F12> :!ctags -f .tags -R --c++-kinds=+p --c-kinds=+p --fields=+iaS --extra=+q --exclude=.svn . && cscope -bkq *.h *.cpp<CR>
" map <F11> :!ctags -f ~/.tags -R --c++-kinds=+p --c-kinds=+p --fields=+iaS --extra=+q /usr/include /usr/local/include /usr/X11R6/include  /home/qiangx/lib2-64 /home/qiangx/app /home/qiangx/public <CR>
set tags=~/.tags
set tags+=~/.TAGS
set tags+=.tags
set tags+=../.tags

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Taglist
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if MySys() == "windows"               "设定windows系统中ctags程序的位置
    let Tlist_Ctags_Cmd = 'ctags'
else
    let Tlist_Ctags_Cmd = '/usr/bin/ctags'
endif
let Tlist_Show_One_File = 1            "不同时显示多个文件的tag，只显示当前文件的
let Tlist_Exit_OnlyWindow = 1          "如果taglist窗口是最后一个窗口，则退出vim
let Tlist_Use_Right_Window = 1         "在右侧窗口中显示taglist窗口

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Doxgen toolkit
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:DoxygenToolkit_commentType="C++"
let g:DoxygenToolkit_authorName="qianguoxiang@snda.com"
let g:DoxygenToolkit_briefTag_funcName="yes"
let g:DoxygenToolkit_brifTag_pre="@synopsis "
let g:DoxygenToolkit_paramTag_pre="@param[in out] "
let g:DoxygenToolkit_returnTag="@return "
let g:DoxygenToolkit_versionString="1.0"
let g:doxygen_enhanced_color=1
let g:DoxygenToolkit_endCommentTag="//////////////////////////////////////////////////////"

function! StarDict()
    let expl=system('sdcv -n ' . expand("<cword>"))
    windo if expand("%") == "diCt-tmp" | q! | endif
    35vsp diCt-tmp
    setlocal buftype=nofile bufhidden=hide noswapfile
    1s/^/\=expl/
    1
endfunction

"nmap F :call StarDict()<CR>

function! Rtest()
  let l:cmd='rake test TEST=' . expand("%")
  let rake_test=system(l:cmd)
  cexpr rake_test
  caddexpr l:cmd
  cwindow
endfunction
command Rtest :call Rtest()


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vimgdb
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" let g:vimgdb_can_loaded=1
"" let g:vimgdb_debug_file = ""
""
"" function! <SID>StartVIMGDB()
""     if g:vimgdb_can_loaded
""         let g:vimgdb_can_loaded= 0
""         run macros/gdb_mappings.vim
""     else
""         echo "the gdb is running...."
""     endif
"" endfunction
""
"" nmap <F6> :call <SID>StartVIMGDB()<CR><C-C><C-C> tbreak<CR> run<CR>
"" nmap <C-F6> :call <SID>StartVIMGDB()<CR>

nmap <silent> <leader>ss :cs find s <cword><CR>
nmap <silent> <leader>sg :cs find g <cword><CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => For Json
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

au! BufRead,BufNewFile *.json set filetype=javascript

augroup json_autocmd
  autocmd!
  autocmd FileType ruby,json set autoindent
  autocmd FileType ruby,json set formatoptions=tcq2l
  autocmd FileType ruby,json set textwidth=80 shiftwidth=2
  autocmd FileType ruby,json set softtabstop=2 tabstop=2
  autocmd FileType ruby,json set expandtab
  autocmd FileType json set foldmethod=syntax
augroup END

map <leader>jt  <Esc>:%!json_xs -f json -t json-pretty<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => For Coffee
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"au! BufRead,BufNewFile *.coffee set filetype=coffeescript
"
"augroup coffee_autocmd
"  autocmd!
"  autocmd FileType coffeescript set autoindent
"  autocmd FileType coffeescript set formatoptions=tcq2l
"  autocmd FileType coffeescript set textwidth=80 shiftwidth=2
"  autocmd FileType coffeescript set softtabstop=2 tabstop=2
"  autocmd FileType coffeescript set expandtab
"  autocmd FileType coffeescript set foldmethod=syntax
"augroup END


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => For supertab
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:SuperTabCrMapping = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => For current project
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"let g:vimwiki_list.path = '~/Documents/wiki/'
"nmap <silent><buffer> <S-Space> <Plug>VimwikiToggleListItem
hi def link yamlKeyValueDelimiter        Operator

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => For IME/GVIM
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"set imactivatekey=C-space
"autocmd! InsertLeave * set imdisable
"autocmd! InsertEnter * set noimdisable

function! DisableIME()
  let n=system('xdotool key Control+Alt+semicolon')
  echo "IME disabled"
endfunction

function! EnableIME()
  system('xdotool key Control+Alt+Shift+asciitilde')
  "let n=system('xdotool keydown Shift')
  "let n=system('xdotool keyup Shift')
endfunction

function! Insert_entered()
  let char = getline('.')[col('.') - 2]
  let cjk_mode = char >= "\x80"
  echo char
  echo cjk_mode

  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunction

autocmd! InsertLeave * call ibus#disable()
"autocmd! InsertEnter * call EnableIME()
nmap <Esc> call ibus#disable()

function! LoadIrbHistory()
    let num=system('grep -n "session" ~/.irb-history | tail -n 1 | cut -d ":" -f 1')
    let num=substitute(num, "\n$", "", "g")
    let sed = "sed 1,'" . num . "d' ~/.irb-history"
    let lines=system(sed)
    "echo num
    "echo sed
    "echo lines
    12sp irb-history
    setlocal buftype=nofile bufhidden=hide noswapfile
    1s/^/\=lines/
    1
endfunction


map <leader>ir :call LoadIrbHistory()<CR>

map <C-T> :NERDTreeToggle<CR>

let g:user_zen_expandabbr_key='<c-y>'
let g:use_zen_complete_tag=1

let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_rails = 1
let g:surround_45 = "<% \r %>"
let g:surround_61 = "<%= \r %>"
let b:surround_{char2nr('=')} = "<%= \r %>"
let b:surround_{char2nr('-')} = "<% \r %>"

map <leader>do  <Esc>:e ~/vimwiki/gtd.wiki<CR>
map <leader>ff  <Esc>:e ~/vimwiki/rails-memo.wiki<CR>
map <leader>mm  <Esc>:e ~/vimwiki/memo.md<CR>
map <leader>dd  <Esc>:e ~/vimwiki/ispace.md<CR>
map <leader>hh  <Esc>:echo "do=gtd ww=wiki mm=memo ff=rails-demo dd=ispace.md"<CR>

