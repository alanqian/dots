"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" .vimrc
" maintainer: qianguoxiang@qq.com
" version: 3.0 - Jan 6, 2015
 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General UI
set nocompatible "use Vim settings, rather then Vi settings.
filetype plugin indent on

set history=512
set number

let mapleader = ","  " Leader
let g:mapleader = ","

"set showcmd      "display incomplete commands
set laststatus=2  "Always display the status line
set autowrite     "Automatically :write before running commands
set autoread      "Set to auto read when a file is changed from the outside

set scrolloff=4   "Set 4 lines to the curors - when moving vertical..
set wildmenu      "Turn on WiLd menu
set ruler         "Always show current position
set cmdheight=2   "The commandbar height
set hid           "Change buffer - without saving
set backspace=eol,start,indent "Set backspace config
set whichwrap+=<,>,h,l
set ignorecase    "Ignore case when searching
set smartcase
set hlsearch      "Highlight search things
set incsearch     "Make search act like search in modern browsers
set nolazyredraw  "Don't redraw while executing macros
set magic         "Set magic on, for regular expressions
set showmatch     "Show matching bracets when text indicator is over them
set mat=2         "How many tenths of a second to blink
set completeopt=longest,menu

" No sound on errors
set noerrorbells
set novisualbell
set t_vb=
set timeoutlen=500

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
syntax enable
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files: encoding, backups, undo, last cursor position

" File encoding
" :e ++enc=cp936 to reload file in cp936 encodings
set encoding=utf8  ",cp936
set fileencodings=utf-8,cp936,ucs-bom "Support files both in unicode & GBK
set termencoding=utf-8
set ffs=unix,dos,mac "Default file types
set wildignore=*.o,*.obj,*.a,*.lib,*.dll,*.exe

" File backup/swapfile/undofile
set nobackup     "Turn backup off, since most stuff is in SVN, git anyway...
set nowritebackup
set noswapfile
set noundofile

" remeber last cursor position
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif
" When editing a file, always jump to the last known cursor position.
" Don't do it for commit messages, when the position is invalid, or when
" inside an event handler (happens when dropping a file on gvim).
autocmd BufReadPost *
  \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
  \   exe "normal g`\"" |
  \ endif

" trim trail space before save
func! TrimRight()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc

augroup vimrc_trim_right
  autocmd!
  " trim trail space before save
  "Delete trailing white space, useful for C/C++, Perl, Ruby, Python, etc
  autocmd bufwritepre *.h,*.c,*.hh,*.cc,*.hpp,*.cpp,*.hxx,*.cxx :call TrimRight()
  autocmd bufWritepre *.sh,*.pl,*.pm,*.rb,*.erb,*.haml,*.py,*.php,*.js,*.coffee :call TrimRight()
  autocmd bufWritepre *.erb,*.haml :call TrimRight()
  autocmd bufWritepre *.xml,*.yml,*.json,*.sql :call TrimRight()
augroup END

func! Filter_win_build_log()
  %s/\\/\//g
  exe "normal gg"
  exe "normal /error\|warning"
endfunc

augroup build_log
  autocmd BufReadPost build.log :call Filter_win_build_log()
augroup END

set path=.,../include,/usr/include,/usr/include/c++/4.8

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text: tab/indent/wrap related

set wildmode=full       " completion mode
set expandtab
set textwidth=86
set tabstop=2
set softtabstop=2
set shiftwidth=2
set smarttab
set noautoindent
set smartindent
set shiftround
set nowrap
"set linebreak
"set numberwidth=5

" folding: set default to unfold when open a file
" zo/zc/za, use zM to close all folding
set foldmethod=indent "syntax
set foldlevel=0
autocmd BufRead * normal zR

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts

" Set font according to system
if MySys() == "mac"
  set gfn=Menlo:h14
  set shell=/bin/bash
elseif MySys() == "windows"
  set gfn=Monaco:h12
elseif MySys() == "linux"
  set gfn=Monospace\ 12
  set shell=/bin/bash
endif

"color scheme
if has("gui_running")
  set guioptions-=T
  set t_Co=256
  set background=dark
  colorscheme peaksea
  set lines=57 columns=100
  winpos 4 24
  set nomousehide
  imap <C-S-V> <ESC>l"+gPi
  nmap <C-S-V> l"+gPi
else
  set background=dark
  "colorscheme peachpuff " peaksea pablo pyte zellner
  colorscheme desert
  " Hide the mouse pointer while typing
  set mousehide
endif

" customized highlight
hi TabLine term=standout cterm=standout ctermfg=0 ctermbg=7
hi def link yamlKeyValueDelimiter        Operator

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => search/grep in visual mode

" Really useful!
"  In visual mode when you press * or # to search for the current selection
vnoremap <silent> * :call VisualSearch('f')<CR>
vnoremap <silent> # :call VisualSearch('b')<CR>
" When you press gv you vimgrep after the selected text
vnoremap <silent> gv :call VisualSearch('gv')<CR>
map <leader>g :vimgrep // **/*.<left><left><left><left><left><left><left>

func! CmdLine(str)
  exe "menu Foo.Bar :" . a:str
  emenu Foo.Bar
  unmenu Foo
endfunc

" From an idea by Michael Naumann
func! VisualSearch(direction) range
  let l:saved_reg = @"
  execute "normal! vgvy"

  let l:pattern = escape(@", '\\/.*$^~[]')
  let l:pattern = substitute(l:pattern, "\n$", "", "")

  if a:direction == 'b'
    execute "normal ?" . l:pattern . "^M"
  elseif a:direction == 'gv'
    call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
  elseif a:direction == 'f'
    execute "normal /" . l:pattern . "^M"
  endif

  let @/ = l:pattern
  let @" = l:saved_reg
endfunc

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Key Mapping

" Fast saving
nmap <leader>w :w!<cr>

" Fast editing of the .vimrc
nmap <leader>rc :tabe! ~/.vim/_vimrc<cr>
" When _vimrc is edited, reload it
" autocmd! bufwritepost /home/dots/vim/_vimrc source /home/dots/vim/_vimrc
map <leader>pp :setlocal invpaste!<cr>

" Useful with Chinese IME
nnoremap ： :
nnoremap 、 /
nnoremap × *
nnoremap # #
nnoremap …… ^
nnoremap ￥ $
nnoremap 《 <
nnoremap 》 >

" Tab configuration
map <leader>e :tabe

" bash like keys for the command line
cnoremap <C-A>		  <Home>
cnoremap <C-E>		  <End>
cnoremap <C-P>      <Up>
cnoremap <C-N>      <Down>
cnoremap <S-Insert> <C-R>

" bash like keys for quick edit
inoremap <C-A> <Home>
inoremap <C-E> <End>
inoremap <C-F> <C-Right>
inoremap <C-B> <C-Left>

" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm
noremap <C-\> <Esc>^i///-<Esc>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs and buffers

" Map space to next/prev method
nmap <Space> ]m
nmap <C-Space> [m
vmap <Space> ]m
vmap <C-Space> [m
" hide search highlightings
nmap <silent> <leader>/ :let @/=''<cr>
nmap <silent> <leader>? :%s///gn<cr>

"set cursorline
nnoremap <C-N> :set invcursorline<CR>

" Open new split panes to bottom, which feels more natural
set splitbelow
"set splitright
"rightbelow cwindow
"botright cwindow

" Smart way to move between windows
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Use the arrows to something usefull
map <right> :bn<cr>
map <left> :bp<cr>
"nmap <Down> [M
"nmap <Up> ]M

" Tab configuration
map <leader>e :tabe
"switch between TABs
set switchbuf=usetab,newtab
nmap <Tab> :tabn<CR>
nmap <S-Tab> :tabN<CR>
"nmap <C-Tab> :bnext<CR>

" Switch between the last two files
nnoremap <leader><leader> <c-^>

" Specify the behavior when switching between buffers
try
  set switchbuf=useopen
  set showtabline=1 " show tab line if tabs > 1
catch
endtry

"map <leader>tn :tabnew<cr>
"map <leader>te :tabedit
"map <leader>tc :tabclose<cr>
"map <leader>tm :tabmove

" vimdiff: vertical diffs, next/prev 
set diffopt+=vertical       " Always use vertical diffs
if &diff
  nnoremap <Space> ]c
  nnoremap <M-Space> [c
  nnoremap <Down> ]c
  nnoremap <Up> [c
  nnoremap <leader>p :diffput
endif

" When pressing <leader>cd switch to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>

"Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
if MySys() == "mac"
  nmap <M-j> mz:m+<cr>`z
  nmap <M-k> mz:m-2<cr>`z
  vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
  vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z
  nmap <D-j> <M-j>
  nmap <D-k> <M-k>
  vmap <D-j> <M-j>
  vmap <D-k> <M-k>
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => For IME/GVIM
" ???


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking

"Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

"Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=
"set spellfile=$HOME/.vim-spell-en.utf-8.add

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General Abbrevs

"iab xdate <c-r>=strftime("%d/%m/%y %H:%M:%S")<cr>
iab xdate <c-r>=strftime("%b %d, %Y")<cr>


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => filetypes
augroup vimrc_filetypes
  autocmd!

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile *.h,*.hh,*.hpp,*.hxx,*.inl,*.c,*.cc,*.cpp,*.cxx set filetype=cpp
  autocmd BufRead,BufNewFile *.json set filetype=javascript
  autocmd BufRead,BufNewFile Appraisals set filetype=ruby
  autocmd BufRead,BufNewFile *.md set filetype=markdown

  " Cucumber navigation commands
  autocmd User Rails Rnavcommand step features/step_definitions -glob=**/* -suffix=_steps.rb
  autocmd User Rails Rnavcommand config config -glob=**/* -suffix=.rb -default=routes

  " Automatically wrap at 80 characters for Markdown
  autocmd FileType markdown setlocal textwidth=80
  autocmd FileType markdown setlocal nospell

  " Automatically wrap at 72 characters and spell check git commit messages
  autocmd FileType gitcommit setlocal textwidth=72
  autocmd FileType gitcommit setlocal spell

  " Allow stylesheets to autocomplete hyphenated words
  autocmd FileType css,scss,sass setlocal iskeyword+=-

  autocmd BufReadPost *.txt setlocal wrap
  autocmd BufReadPost *.log setlocal wrap
augroup END

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Cope

" Do :help cope if you are unsure what cope is. It's super useful!
map <leader>cc :botright cope<cr>
map <leader>n :cn<cr>
map <leader>p :cp<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Omni complete functions

autocmd FileType css set omnifunc=csscomplete#CompleteCSS
" 1. Whole lines                                |i_CTRL-X_CTRL-L|
" 2. keywords in the current file               |i_CTRL-X_CTRL-N|
" 3. keywords in 'dictionary'                   |i_CTRL-X_CTRL-K|
" 4. keywords in 'thesaurus', thesaurus-style   |i_CTRL-X_CTRL-T|
" 5. keywords in the current and included files |i_CTRL-X_CTRL-I|
" 6. tags                                       |i_CTRL-X_CTRL-]|
" 7. file names                                 |i_CTRL-X_CTRL-F|
" 8. definitions or macros                      |i_CTRL-X_CTRL-D|
" 9. Vim command-line                           |i_CTRL-X_CTRL-V|
"10. User defined completion                    |i_CTRL-X_CTRL-U|
"11. omni completion                            |i_CTRL-X_CTRL-O|
"12. Spelling suggestions                       |i_CTRL-X_s|
"13. keywords in 'complete'                     |i_CTRL-N|


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => ctags
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <C-F12> :!ctags -f .tags -R --c++-kinds=+p --c-kinds=+p --fields=+iaS --extra=+q --exclude=.svn . && cscope -bkq *.h *.cpp<CR>
" map <F11> :!ctags -f ~/.tags -R --c++-kinds=+p --c-kinds=+p --fields=+iaS --extra=+q /usr/include /usr/local/include /usr/X11R6/include  /home/qiangx/lib2-64 /home/qiangx/app /home/qiangx/public <CR>
set tags=~/.tags
set tags+=~/.TAGS
set tags+=.tags
set tags+=../.tags

" Exclude Javascript files in :Rtags via rails.vim due to warnings when parsing
let g:Tlist_Ctags_Cmd="ctags --exclude='*.js'"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Tagbar

let g:tagbar_ctags_bin = 'ctags'
let g:tagbar_width = 30

let Tlist_Exit_OnlyWindow = 1          "如果taglist窗口是最后一个窗口，则退出vim
let Tlist_Use_Right_Window = 1         "在右侧窗口中显示taglist窗口

" Index ctags from any project, including those outside Rails
map <Leader>ct :!ctags -R .<CR>
map <Leader>tt :TagbarToggle<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vimgdb

"" let g:vimgdb_can_loaded=1
"" let g:vimgdb_debug_file = ""
""
"" function! <SID>StartVIMGDB()
""     if g:vimgdb_can_loaded
""         let g:vimgdb_can_loaded= 0
""         run macros/gdb_mappings.vim
""     else
""         echo "the gdb is running...."
""     endif
"" endfunction
""
"" nmap <F6> :call <SID>StartVIMGDB()<CR><C-C><C-C> tbreak<CR> run<CR>
"" nmap <C-F6> :call <SID>StartVIMGDB()<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => cscope
if has("cscope")
  set csprg=/usr/bin/cscope
  set cscopequickfix=s-,c-,d-,i-,t-,e-
  set cscopetag
  set csto=1
  set nocsverb
  " add any database in dirs
  for f in [ './cscope.out', './.cscope.out', '../cscope.out', '../.cscope.out', '../../cscope.out', '../../.cscope.out']
    if filereadable(f)
      execute 'cs add ' . f . ' ~/work/dsc7/'
      set csverb
      break
    endif
  endfor
  " 0 or s: Find this C symbol
  nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
  " 1 or g: Find this definition
  nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
  " 2 or d: Find functions called by this function
  nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>
  " 3 or c: Find functions calling this function
  nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
  " 4 or t: Find this text string
  nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
  " 6 or e: Find this egrep pattern
  nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
  " 7 or f: Find this file
  nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
  " 8 or i: Find files #including this file
  nmap <C-_>i :cs find i <C-R>=expand("<cfile>")<CR><CR>
endif

"try
"    lang en_US
"catch
"endtry


nmap <leader>cs :cs find g 


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Doxgen toolkit
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" using :Dox command to add doxygen comment
let g:DoxygenToolkit_commentType="C++"
let g:DoxygenToolkit_authorName="alanqian, qian.guoxiang@qq.com"
let g:DoxygenToolkit_briefTag_funcName="yes"
let g:DoxygenToolkit_brifTag_pre="@synopsis "
let g:DoxygenToolkit_paramTag_pre="@param[in out] "
let g:DoxygenToolkit_returnTag="@return "
let g:DoxygenToolkit_versionString="1.0"
let g:doxygen_enhanced_color=1
let g:DoxygenToolkit_endCommentTag="//////////////////////////////////////////////////////"


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vim-templates
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:email = "qian.guoxiang@qq.com"
let g:project = "dsc"
let g:templates_directory = '/home/dots/vim/templates'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => stardict
function! StarDict()
    let expl=system('sdcv -n ' . expand("<cword>"))
    windo if expand("%") == "diCt-tmp" | q! | endif
    35vsp diCt-tmp
    setlocal buftype=nofile bufhidden=hide noswapfile
    1s/^/\=expl/
    1
endfunction
nmap <leader>F :call StarDict()<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vim-rspec mappings

nnoremap <Leader>t :call RunCurrentSpecFile()<CR>
nnoremap <Leader>s :call RunNearestSpec()<CR>
nnoremap <Leader>l :call RunLastSpec()<CR>
nnoremap <Leader>r :RunInInteractiveShell<space>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => html5.vim: Treat <li> and <p> tags like the block tags they are

let g:html_indent_tags = 'li\|p'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => syntastic: configure syntax checking to check on open as well as save
let g:syntastic_check_on_open=1
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ????
" will insert tab at beginning of line,
" will use completion if not at beginning
func! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunc

inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
inoremap <S-Tab> <c-n>

" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" Local config
if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif

nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-t>t :TagbarToggle<CR>

"free markdown from vimwiki plugin for snipmate, tab completion
let g:vimwiki_ext2syntax = {}

if getcwd() !~ "^/home/dots/" && getcwd() != "/home/dots" && filereadable('./_vimrc')
  source ./_vimrc
endif
