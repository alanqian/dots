.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::GSL::Test 3pm"
.TH Math::GSL::Test 3pm "2012-08-21" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::GSL::Test \- Assertions and such
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Math::GSL::Test qw/:all/;
\&    ok_similar($x,$y, $msg, $eps);
.Ve
.SS "\fIis_windows()\fP"
.IX Subsection "is_windows()"
Returns true if current system is Windows-like.
.SS "is_similar($x,$y;$eps,$similarity_function)"
.IX Subsection "is_similar($x,$y;$eps,$similarity_function)"
.Vb 3
\&    is_similar($x,$y);
\&    is_similar($x, $y, 1e\-7);
\&    is_similar($x,$y, 1e\-3, sub { ... } );
.Ve
.PP
Return true if \f(CW$x\fR and \f(CW$y\fR are within \f(CW$eps\fR of each other, i.e.
.PP
.Vb 1
\&    abs($x\-$y) <= $eps
.Ve
.PP
If passed a code reference \f(CW$similarity_function\fR, it will pass \f(CW$x\fR and \f(CW$y\fR as parameters to it and 
will check to see if
.PP
.Vb 1
\&    $similarity_function\->($x,$y_) <= $eps
.Ve
.PP
The default value of \f(CW$eps\fR is 1e\-8. Don't try sending anything to the Moon with this value...
.ie n .SS "verify( $results, $class)"
.el .SS "verify( \f(CW$results\fP, \f(CW$class\fP)"
.IX Subsection "verify( $results, $class)"
Takes a hash reference of key/value pairs where the keys are bits of code, which when evaluated should
be within some tolerance of the value. For example:
.PP
.Vb 6
\&    my $results = { 
\&                    \*(Aqgsl_cdf_ugaussian_P(2.0)\*(Aq        => [ 0.977250, 1e\-5 ],
\&                    \*(Aqgsl_cdf_ugaussian_Q(2.0)\*(Aq        => [ 0.022750, 1e\-7 ],
\&                    \*(Aqgsl_cdf_ugaussian_Pinv(0.977250)\*(Aq=> [ 2.000000 ],
\&                  };
\&    verify($results, \*(AqMath::GSL::CDF\*(Aq);
.Ve
.PP
When no tolerance is given, a value of 1e\-8 = 0.00000001 is used. One
may use \f(CW$GSL_NAN\fR and \f(CW$GSL_INF\fR in comparisons and this routine will
use the \fIgsl_isnan()\fR and \fIgsl_isinf()\fR routines to compare them.
.PP
Note: Needing to pass in the class name is honky. This may change.
.ie n .SS "ok_status( $got_status; $expected_status )"
.el .SS "ok_status( \f(CW$got_status\fP; \f(CW$expected_status\fP )"
.IX Subsection "ok_status( $got_status; $expected_status )"
.Vb 1
\&    ok_status( $status );                  # defaults to checking for $GSL_SUCCESS
\&
\&    ok_status( $status, $GSL_ECONTINUE );
.Ve
.PP
Pass a test if the \s-1GSL\s0 status codes match, with a default expected status of \f(CW$GSL_SUCCESS\fR. This
function also stringifies the status codes into meaningful messages when it fails.
.SS "is_status_ok($status)"
.IX Subsection "is_status_ok($status)"
.Vb 1
\&    is_status_ok( $status );
.Ve
.PP
Return true if \f(CW$status\fR is \f(CW$GSL_SUCCESS\fR, false otherwise.
.ie n .SS "ok_similar( $x, $y, $msg, $eps)"
.el .SS "ok_similar( \f(CW$x\fP, \f(CW$y\fP, \f(CW$msg\fP, \f(CW$eps\fP)"
.IX Subsection "ok_similar( $x, $y, $msg, $eps)"
.Vb 3
\&    ok_similar( $x, $y);
\&    ok_similar( $x, $y, \*(Aqreason\*(Aq);
\&    ok_similar( $x, $y, \*(Aqreason\*(Aq, 1e\-4);
.Ve
.PP
Pass a test if is_similar($x,$y,$msg,$eps) is true, otherwise fail.
.ie n .SS "is_similar_relative( $x, $y, $msg, $eps )"
.el .SS "is_similar_relative( \f(CW$x\fP, \f(CW$y\fP, \f(CW$msg\fP, \f(CW$eps\fP )"
.IX Subsection "is_similar_relative( $x, $y, $msg, $eps )"
.Vb 1
\&    is_similar_relative($x, $y, $eps );
.Ve
.PP
Returns true if \f(CW$x\fR has a relative error with repect to \f(CW$y\fR less than \f(CW$eps\fR. The
current default for \f(CW$eps\fR is the same as \fIis_similar()\fR, i.e. 1e\-8. This doesn't
seem very useful. What should the default be?
.ie n .SS "ok_similar_relative( $x, $y, $msg, $eps )"
.el .SS "ok_similar_relative( \f(CW$x\fP, \f(CW$y\fP, \f(CW$msg\fP, \f(CW$eps\fP )"
.IX Subsection "ok_similar_relative( $x, $y, $msg, $eps )"
.Vb 1
\&    ok_similar_relative($x, $y, $msg, $eps );
.Ve
.PP
Pass a test if \f(CW$x\fR has a relative error with repect to \f(CW$y\fR less than \f(CW$eps\fR.
