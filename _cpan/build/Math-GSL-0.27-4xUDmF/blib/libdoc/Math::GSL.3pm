.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::GSL 3pm"
.TH Math::GSL 3pm "2012-08-21" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::GSL \- Perl interface to the GNU Scientific Library (GSL)
.SH "VERSION"
.IX Header "VERSION"
Version 0.27
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    use Math::GSL::Matrix;
\&    my $matrix = Math::GSL::Matrix\->new(5,5);   # 5x5 zero matrix
\&    # note that columns and rows are zero\-based
\&    $matrix\->set_col(0, [1..5])                 # set *first* column to 1,2,3,4,5
\&           \->set_row(2, [5..9]);                # set *third* column to 5,6,7,8,9
\&    my @matrix = $matrix\->as_list;              # matrix as Perl list
\&    my $gsl_matrix = $matrix\->raw;              # underlying GSL object
\&
\&    use Math::GSL::RNG;
\&    my $rng = Math::GSL::RNG\->new;
\&    my @random_numbers = $rng\->get(1000);
\&
\&    use Math::GSL::Deriv qw/:all/;
\&    my $function = sub { my $x=shift; sin($x**2) };
\&    my ($status,$val,$err) = gsl_deriv_central($function, 5, 0.01 );
\&
\&    use Math::GSL qw/gsl_version/;
\&    # get a version object for the version of the underlying GSL library,
\&    # which will stringify to a version number
\&    my $gsl_version = gsl_version();
.Ve
.PP
Each \s-1GSL\s0 subsystem has it's own module. For example, the random number generator
subsystem is Math::GSL::RNG. Many subsystems have a more Perlish and
object-oriented frontend which can be used, as the above example shows. The raw
\&\s-1GSL\s0 object is useful for using the low-level \s-1GSL\s0 functions, which in the case of
the Matrix subsytem, would be of the form gsl_matrix_* . Each module has further
documentation about the low-level C functions as well as using the more
intuitive (but slightly slower) object-oriented interface.
.SH "SUBSYSTEMS"
.IX Header "SUBSYSTEMS"
Math::GSL::BLAS            \- Linear Algebra Functions
.PP
Math::GSL::BSpline         \- BSplines
.PP
Math::GSL::CBLAS           \- Linear Algebra Functions
.PP
Math::GSL::CDF             \- Cumulative Distribution Functions
.PP
Math::GSL::Chebyshev       \- Chebyshev Polynomials
.PP
Math::GSL::Combination     \- Combinatoric Functions
.PP
Math::GSL::Complex         \- Complex Numbers
.PP
Math::GSL::Const           \- Various Constants
.PP
Math::GSL::DHT             \- Discrete Hankel Transforms
.PP
Math::GSL::Deriv            \- Numerical Derivative
.PP
Math::GSL::Eigen           \- Eigenvalues and Eigenvectors
.PP
Math::GSL::Errno           \- Error Handling
.PP
Math::GSL::FFT             \- Fast Fourier Transform
.PP
Math::GSL::Fit             \- Curve Fitting
.PP
Math::GSL::Heapsort        \- Sorting Heaps
.PP
Math::GSL::Histogram       \- Histograms
.PP
Math::GSL::Histogram2D     \- 2D Histograms
.PP
Math::GSL::Integration     \- Numerical Integration
.PP
Math::GSL::Interp          \- Interpolation
.PP
Math::GSL::Linalg          \- Linear Algebra
.PP
Math::GSL::Machine         \- Machine Specific Information
.PP
Math::GSL::Matrix          \- NxM Matrices
.PP
Math::GSL::Min             \- Minimization
.PP
Math::GSL::Monte           \- Monte Carlo Integrations
.PP
Math::GSL::Multifit        \- Multivariable Fitting
.PP
Math::GSL::Multimin        \- Multivariable Minimization
.PP
Math::GSL::Multiroots      \- Muiltvariable Root Finding
.PP
Math::GSL::NTuple          \- N Tuples
.PP
Math::GSL::ODEIV           \- Ordinary Differential Equation Solvers (Initial Value Problems)
.PP
Math::GSL::Permutation     \- Permutations
.PP
Math::GSL::Poly            \- Polynmials
.PP
Math::GSL::PowInt          \- Integer Power Functions
.PP
Math::GSL::QRNG            \- Quasi-Random Number Generators
.PP
Math::GSL::RNG             \- Random Number Generators
.PP
Math::GSL::Randist         \- Random Number Distributions
.PP
Math::GSL::Roots           \- Root Finding Algorithms
.PP
Math::GSL::SF              \- Special Functions
.PP
Math::GSL::Siman           \- Simulated Annealing
.PP
Math::GSL::Sort            \- Sorting
.PP
Math::GSL::Spline          \- Splines
.PP
Math::GSL::Statistics      \- Statistics Functions
.PP
Math::GSL::Sum             \- Summation
.PP
Math::GSL::Sys             \- Sytem utility functions
.PP
Math::GSL::Vector          \- N\-dimensional Vectors
.PP
Math::GSL::Wavelet         \- Basic Wavelets
.PP
Math::GSL::Wavelet2D        \- 2D Wavelets
.SH "AUTHORS"
.IX Header "AUTHORS"
Jonathan \*(L"Duke\*(R" Leto, \f(CW\*(C`<jonathan@leto.net>\*(C'\fR and Thierry Moisan \f(CW\*(C`<thierry.moisan@gmail.com>\*(C'\fR
.SH "BUGS"
.IX Header "BUGS"
This software is still in active development, we appreciate your detailed bug reports and
documentation patches. Please report any bugs or feature requests to the authors directly.
.SH "COMPILING ISSUES"
.IX Header "COMPILING ISSUES"
Some operating system configurations will make the compilation of Math::GSL fail. One
common problem that happens on RedHat Linux (\s-1RHEL\s0) and CentOS looks like this:
.PP
.Vb 4
\&    Error:  Can\*(Aqt load \*(Aq/usr/src/misc/perl\-package/Math\-GSL\-0.20/blib/arch/auto/Math/GSL/Errno/Errno.so\*(Aq
\&    for module Math::GSL::Errno: /usr/src/misc/perl\-package/Math\-GSL\-0.20/blib/arch/auto/Math/GSL/Errno/Errno.so:
\&    cannot restore segment prot after reloc: Permission denied at /usr/lib/perl5/5.10.0/i386\-linux\-thread\-multi/DynaLoader.pm line 203.
\&    #  at blib/lib/Math/GSL/Errno.pm line 10
.Ve
.PP
This is due the the \s-1SE\s0 Linux setting being set to \*(L"enforcing\*(R". To Temporarily
disable enforcement on a running system:
.PP
.Vb 1
\&    /usr/sbin/setenforce 0
.Ve
.PP
To permanently disable enforcement during a system startup change \*(L"enforcing\*(R" to
\&\*(L"disabled\*(R" in ''/etc/selinux/config'' and reboot.
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc Math::GSL
.Ve
.PP
or online at http://leto.net/code/Math\-GSL/ <http://leto.net/code/Math-GSL/>
.IP "\(bu" 4
AnnoCPAN: Annotated \s-1CPAN\s0 documentation
.Sp
<http://annocpan.org/dist/Math::GSL>
.IP "\(bu" 4
\&\s-1CPAN\s0 Ratings
.Sp
<http://cpanratings.perl.org/d/Math::GSL>
.IP "\(bu" 4
Search \s-1CPAN\s0
.Sp
<http://search.cpan.org/dist/Math::GSL>
.SH "DEVELOPMENT"
.IX Header "DEVELOPMENT"
If you would like the help develop Math::GSL, email the authors
and do
.PP
.Vb 3
\&    git clone git://github.com/leto/math\-\-gsl.git
\&    cd math\-\-gsl
\&    # start hacking
.Ve
.PP
to get the latest source, which is a two-headed beast with branches master and
bleed. The master branch is our stable branch, which is periodically sync-ed
with bleed. To view the latest source code online, go to
http://github.com/leto/math\*(--gsl/tree/master <http://github.com/leto/math--gsl/tree/master>.  The latest version of Git can be found at
http://git\-scm.com <http://git-scm.com> .
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Thanks to \s-1PDX\s0.pm, The Perl Foundation and everyone at Google who makes
the Summer of Code happen each year. You rock.
.SH "DEDICATION"
.IX Header "DEDICATION"
This Perl module is dedicated in memory of Nick Ing-Simmons.
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2008\-2010 Jonathan \*(L"Duke\*(R" Leto, Thierry Moisan all rights reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
