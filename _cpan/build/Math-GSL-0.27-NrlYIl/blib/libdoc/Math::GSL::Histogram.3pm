.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::GSL::Histogram 3pm"
.TH Math::GSL::Histogram 3pm "2012-08-17" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::GSL::Histogram \- Create and manipulate histograms of data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Math::GSL::Histogram qw/:all/;
\&
\&    my $H = gsl_histogram_alloc(100);
\&    gsl_histogram_set_ranges_uniform($H,0,101);
\&    gsl_histogram_increment($H, \-50 );  # ignored
\&    gsl_histogram_increment($H, 70 );   
\&    gsl_histogram_increment($H, 85.2 );
\&
\&    my $G = gsl_histogram_clone($H);
\&    my $value = gsl_histogram_get($G, 70);
\&    my ($max,$min) = (gsl_histogram_min_val($H), gsl_histogram_max_val($H) );
\&    my $sum = gsl_histogram_sum($H);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Here is a list of all the functions included in this module :
.ie n .IP """gsl_histogram_alloc($n)"" \- This function allocates memory for a histogram with $n bins, and returns a pointer to a newly created gsl_histogram struct. The bins and ranges are not initialized, and should be prepared using one of the range-setting functions below in order to make the histogram ready for use." 1
.el .IP "\f(CWgsl_histogram_alloc($n)\fR \- This function allocates memory for a histogram with \f(CW$n\fR bins, and returns a pointer to a newly created gsl_histogram struct. The bins and ranges are not initialized, and should be prepared using one of the range-setting functions below in order to make the histogram ready for use." 1
.IX Item "gsl_histogram_alloc($n) - This function allocates memory for a histogram with $n bins, and returns a pointer to a newly created gsl_histogram struct. The bins and ranges are not initialized, and should be prepared using one of the range-setting functions below in order to make the histogram ready for use."
.PD 0
.ie n .IP """gsl_histogram_calloc """ 1
.el .IP "\f(CWgsl_histogram_calloc \fR" 1
.IX Item "gsl_histogram_calloc "
.ie n .IP """gsl_histogram_calloc_uniform """ 1
.el .IP "\f(CWgsl_histogram_calloc_uniform \fR" 1
.IX Item "gsl_histogram_calloc_uniform "
.ie n .IP """gsl_histogram_free($h)"" \- This function frees the histogram $h and all of the memory associated with it." 1
.el .IP "\f(CWgsl_histogram_free($h)\fR \- This function frees the histogram \f(CW$h\fR and all of the memory associated with it." 1
.IX Item "gsl_histogram_free($h) - This function frees the histogram $h and all of the memory associated with it."
.ie n .IP """gsl_histogram_increment($h, $x)"" \- This function updates the histogram $h by adding one (1.0) to the bin whose range contains the coordinate $x. If $x lies in the valid range of the histogram then the function returns zero to indicate success. If $x is less than the lower limit of the histogram then the function returns $GSL_EDOM, and none of bins are modified. Similarly, if the value of $x is greater than or equal to the upper limit of the histogram then the function returns $GSL_EDOM, and none of the bins are modified. The error handler is not called, however, since it is often necessary to compute histograms for a small range of a larger dataset, ignoring the values outside the range of interest." 1
.el .IP "\f(CWgsl_histogram_increment($h, $x)\fR \- This function updates the histogram \f(CW$h\fR by adding one (1.0) to the bin whose range contains the coordinate \f(CW$x\fR. If \f(CW$x\fR lies in the valid range of the histogram then the function returns zero to indicate success. If \f(CW$x\fR is less than the lower limit of the histogram then the function returns \f(CW$GSL_EDOM\fR, and none of bins are modified. Similarly, if the value of \f(CW$x\fR is greater than or equal to the upper limit of the histogram then the function returns \f(CW$GSL_EDOM\fR, and none of the bins are modified. The error handler is not called, however, since it is often necessary to compute histograms for a small range of a larger dataset, ignoring the values outside the range of interest." 1
.IX Item "gsl_histogram_increment($h, $x) - This function updates the histogram $h by adding one (1.0) to the bin whose range contains the coordinate $x. If $x lies in the valid range of the histogram then the function returns zero to indicate success. If $x is less than the lower limit of the histogram then the function returns $GSL_EDOM, and none of bins are modified. Similarly, if the value of $x is greater than or equal to the upper limit of the histogram then the function returns $GSL_EDOM, and none of the bins are modified. The error handler is not called, however, since it is often necessary to compute histograms for a small range of a larger dataset, ignoring the values outside the range of interest."
.ie n .IP """gsl_histogram_accumulate($h, $x, $weight)"" \- This function is similar to gsl_histogram_increment but increases the value of the appropriate bin in the histogram $h by the floating-point number weight." 1
.el .IP "\f(CWgsl_histogram_accumulate($h, $x, $weight)\fR \- This function is similar to gsl_histogram_increment but increases the value of the appropriate bin in the histogram \f(CW$h\fR by the floating-point number weight." 1
.IX Item "gsl_histogram_accumulate($h, $x, $weight) - This function is similar to gsl_histogram_increment but increases the value of the appropriate bin in the histogram $h by the floating-point number weight."
.ie n .IP """gsl_histogram_find($h, $x)"" \- This function finds the bin number which covers the coordinate $x in the histogram $h. The bin is located using a binary search. The search includes an optimization for histograms with uniform range, and will return the correct bin immediately in this case. If $x is found in the range of the histogram then the function returns the bin number and returns $GSL_SUCCESS. If $x lies outside the valid range of the histogram then the function returns $GSL_EDOM and the error handler is invoked." 1
.el .IP "\f(CWgsl_histogram_find($h, $x)\fR \- This function finds the bin number which covers the coordinate \f(CW$x\fR in the histogram \f(CW$h\fR. The bin is located using a binary search. The search includes an optimization for histograms with uniform range, and will return the correct bin immediately in this case. If \f(CW$x\fR is found in the range of the histogram then the function returns the bin number and returns \f(CW$GSL_SUCCESS\fR. If \f(CW$x\fR lies outside the valid range of the histogram then the function returns \f(CW$GSL_EDOM\fR and the error handler is invoked." 1
.IX Item "gsl_histogram_find($h, $x) - This function finds the bin number which covers the coordinate $x in the histogram $h. The bin is located using a binary search. The search includes an optimization for histograms with uniform range, and will return the correct bin immediately in this case. If $x is found in the range of the histogram then the function returns the bin number and returns $GSL_SUCCESS. If $x lies outside the valid range of the histogram then the function returns $GSL_EDOM and the error handler is invoked."
.ie n .IP """gsl_histogram_get($h, $i)"" \- This function returns the contents of the $i\-th bin of the histogram $h. If $i lies outside the valid range of indices for the histogram then the error handler is called with an error code of \s-1GSL_EDOM\s0 and the function returns 0." 1
.el .IP "\f(CWgsl_histogram_get($h, $i)\fR \- This function returns the contents of the \f(CW$i\fR\-th bin of the histogram \f(CW$h\fR. If \f(CW$i\fR lies outside the valid range of indices for the histogram then the error handler is called with an error code of \s-1GSL_EDOM\s0 and the function returns 0." 1
.IX Item "gsl_histogram_get($h, $i) - This function returns the contents of the $i-th bin of the histogram $h. If $i lies outside the valid range of indices for the histogram then the error handler is called with an error code of GSL_EDOM and the function returns 0."
.ie n .IP """gsl_histogram_get_range($h, $i)"" \- This function finds the upper and lower range limits of the $i\-th bin of the histogram $h. If the index $i is valid then the corresponding range limits are returned after the 0 in this order : lower and then upper. The lower limit is inclusive (i.e. events with this coordinate are included in the bin) and the upper limit is exclusive (i.e. events with the coordinate of the upper limit are excluded and fall in the neighboring higher bin, if it exists). The function returns 0 to indicate success. If i lies outside the valid range of indices for the histogram then the error handler is called and the function returns an error code of $GSL_EDOM." 1
.el .IP "\f(CWgsl_histogram_get_range($h, $i)\fR \- This function finds the upper and lower range limits of the \f(CW$i\fR\-th bin of the histogram \f(CW$h\fR. If the index \f(CW$i\fR is valid then the corresponding range limits are returned after the 0 in this order : lower and then upper. The lower limit is inclusive (i.e. events with this coordinate are included in the bin) and the upper limit is exclusive (i.e. events with the coordinate of the upper limit are excluded and fall in the neighboring higher bin, if it exists). The function returns 0 to indicate success. If i lies outside the valid range of indices for the histogram then the error handler is called and the function returns an error code of \f(CW$GSL_EDOM\fR." 1
.IX Item "gsl_histogram_get_range($h, $i) - This function finds the upper and lower range limits of the $i-th bin of the histogram $h. If the index $i is valid then the corresponding range limits are returned after the 0 in this order : lower and then upper. The lower limit is inclusive (i.e. events with this coordinate are included in the bin) and the upper limit is exclusive (i.e. events with the coordinate of the upper limit are excluded and fall in the neighboring higher bin, if it exists). The function returns 0 to indicate success. If i lies outside the valid range of indices for the histogram then the error handler is called and the function returns an error code of $GSL_EDOM."
.ie n .IP """gsl_histogram_max($h)"" \- This function returns the maximum upper limit of the histogram $h. It provides a way of determining this value without accessing the gsl_histogram struct directly." 1
.el .IP "\f(CWgsl_histogram_max($h)\fR \- This function returns the maximum upper limit of the histogram \f(CW$h\fR. It provides a way of determining this value without accessing the gsl_histogram struct directly." 1
.IX Item "gsl_histogram_max($h) - This function returns the maximum upper limit of the histogram $h. It provides a way of determining this value without accessing the gsl_histogram struct directly."
.ie n .IP """gsl_histogram_min($h)"" \- This function returns the minimum lower range limit of the histogram $h. It provides a way of determining this value without accessing the gsl_histogram struct directly." 1
.el .IP "\f(CWgsl_histogram_min($h)\fR \- This function returns the minimum lower range limit of the histogram \f(CW$h\fR. It provides a way of determining this value without accessing the gsl_histogram struct directly." 1
.IX Item "gsl_histogram_min($h) - This function returns the minimum lower range limit of the histogram $h. It provides a way of determining this value without accessing the gsl_histogram struct directly."
.ie n .IP """gsl_histogram_bins($h)"" \- This function returns the number of bins of the histogram $h limit. It provides a way of determining this value without accessing the gsl_histogram struct directly." 1
.el .IP "\f(CWgsl_histogram_bins($h)\fR \- This function returns the number of bins of the histogram \f(CW$h\fR limit. It provides a way of determining this value without accessing the gsl_histogram struct directly." 1
.IX Item "gsl_histogram_bins($h) - This function returns the number of bins of the histogram $h limit. It provides a way of determining this value without accessing the gsl_histogram struct directly."
.ie n .IP """gsl_histogram_reset($h)"" \- This function resets all the bins in the histogram $h to zero." 1
.el .IP "\f(CWgsl_histogram_reset($h)\fR \- This function resets all the bins in the histogram \f(CW$h\fR to zero." 1
.IX Item "gsl_histogram_reset($h) - This function resets all the bins in the histogram $h to zero."
.ie n .IP """gsl_histogram_calloc_range""" 1
.el .IP "\f(CWgsl_histogram_calloc_range\fR" 1
.IX Item "gsl_histogram_calloc_range"
.ie n .IP """gsl_histogram_set_ranges($h, $range, $size)"" \- This function sets the ranges of the existing histogram $h using the array $range of size $size. The values of the histogram bins are reset to zero. The $range array should contain the desired bin limits. The ranges can be arbitrary, subject to the restriction that they are monotonically increasing. Note that the size of the $range array should be defined to be one element bigger than the number of bins. The additional element is required for the upper value of the final bin." 1
.el .IP "\f(CWgsl_histogram_set_ranges($h, $range, $size)\fR \- This function sets the ranges of the existing histogram \f(CW$h\fR using the array \f(CW$range\fR of size \f(CW$size\fR. The values of the histogram bins are reset to zero. The \f(CW$range\fR array should contain the desired bin limits. The ranges can be arbitrary, subject to the restriction that they are monotonically increasing. Note that the size of the \f(CW$range\fR array should be defined to be one element bigger than the number of bins. The additional element is required for the upper value of the final bin." 1
.IX Item "gsl_histogram_set_ranges($h, $range, $size) - This function sets the ranges of the existing histogram $h using the array $range of size $size. The values of the histogram bins are reset to zero. The $range array should contain the desired bin limits. The ranges can be arbitrary, subject to the restriction that they are monotonically increasing. Note that the size of the $range array should be defined to be one element bigger than the number of bins. The additional element is required for the upper value of the final bin."
.ie n .IP """gsl_histogram_set_ranges_uniform($h, $xmin, $xmax)"" \- This function sets the ranges of the existing histogram $h to cover the range $xmin to $xmax uniformly. The values of the histogram bins are reset to zero. The bin ranges are shown in the table below," 1
.el .IP "\f(CWgsl_histogram_set_ranges_uniform($h, $xmin, $xmax)\fR \- This function sets the ranges of the existing histogram \f(CW$h\fR to cover the range \f(CW$xmin\fR to \f(CW$xmax\fR uniformly. The values of the histogram bins are reset to zero. The bin ranges are shown in the table below," 1
.IX Item "gsl_histogram_set_ranges_uniform($h, $xmin, $xmax) - This function sets the ranges of the existing histogram $h to cover the range $xmin to $xmax uniformly. The values of the histogram bins are reset to zero. The bin ranges are shown in the table below,"
.IP "bin[0] corresponds to xmin <= x < xmin + d" 4
.IX Item "bin[0] corresponds to xmin <= x < xmin + d"
.IP "bin[1] corresponds to xmin + d <= x < xmin + 2 d" 4
.IX Item "bin[1] corresponds to xmin + d <= x < xmin + 2 d"
.IP "......" 4
.IP "bin[n\-1] corresponds to xmin + (n\-1)d <= x < xmax" 4
.IX Item "bin[n-1] corresponds to xmin + (n-1)d <= x < xmax"
.PD
.PP
where d is the bin spacing, d = (xmax\-xmin)/n.
.ie n .IP """gsl_histogram_memcpy($dest, $src)"" \- This function copies the histogram $src into the pre-existing histogram $dest, making $dest into an exact copy of $src. The two histograms must be of the same size." 4
.el .IP "\f(CWgsl_histogram_memcpy($dest, $src)\fR \- This function copies the histogram \f(CW$src\fR into the pre-existing histogram \f(CW$dest\fR, making \f(CW$dest\fR into an exact copy of \f(CW$src\fR. The two histograms must be of the same size." 4
.IX Item "gsl_histogram_memcpy($dest, $src) - This function copies the histogram $src into the pre-existing histogram $dest, making $dest into an exact copy of $src. The two histograms must be of the same size."
.PD 0
.ie n .IP """gsl_histogram_clone($src)"" \- This function returns a pointer to a newly created histogram which is an exact copy of the histogram $src." 4
.el .IP "\f(CWgsl_histogram_clone($src)\fR \- This function returns a pointer to a newly created histogram which is an exact copy of the histogram \f(CW$src\fR." 4
.IX Item "gsl_histogram_clone($src) - This function returns a pointer to a newly created histogram which is an exact copy of the histogram $src."
.ie n .IP """gsl_histogram_max_val($h)"" \- This function returns the maximum value contained in the histogram bins." 4
.el .IP "\f(CWgsl_histogram_max_val($h)\fR \- This function returns the maximum value contained in the histogram bins." 4
.IX Item "gsl_histogram_max_val($h) - This function returns the maximum value contained in the histogram bins."
.ie n .IP """gsl_histogram_max_bin($h)"" \- This function returns the index of the bin containing the maximum value. In the case where several bins contain the same maximum value the smallest index is returned." 4
.el .IP "\f(CWgsl_histogram_max_bin($h)\fR \- This function returns the index of the bin containing the maximum value. In the case where several bins contain the same maximum value the smallest index is returned." 4
.IX Item "gsl_histogram_max_bin($h) - This function returns the index of the bin containing the maximum value. In the case where several bins contain the same maximum value the smallest index is returned."
.ie n .IP """gsl_histogram_min_val($h)"" \- This function returns the minimum value contained in the histogram bins." 4
.el .IP "\f(CWgsl_histogram_min_val($h)\fR \- This function returns the minimum value contained in the histogram bins." 4
.IX Item "gsl_histogram_min_val($h) - This function returns the minimum value contained in the histogram bins."
.ie n .IP """gsl_histogram_min_bin($h)"" \- This function returns the index of the bin containing the minimum value. In the case where several bins contain the same maximum value the smallest index is returned." 4
.el .IP "\f(CWgsl_histogram_min_bin($h)\fR \- This function returns the index of the bin containing the minimum value. In the case where several bins contain the same maximum value the smallest index is returned." 4
.IX Item "gsl_histogram_min_bin($h) - This function returns the index of the bin containing the minimum value. In the case where several bins contain the same maximum value the smallest index is returned."
.ie n .IP """gsl_histogram_equal_bins_p($h1, $h2)"" \- This function returns 1 if the all of the individual bin ranges of the two histograms are identical, and 0 otherwise." 4
.el .IP "\f(CWgsl_histogram_equal_bins_p($h1, $h2)\fR \- This function returns 1 if the all of the individual bin ranges of the two histograms are identical, and 0 otherwise." 4
.IX Item "gsl_histogram_equal_bins_p($h1, $h2) - This function returns 1 if the all of the individual bin ranges of the two histograms are identical, and 0 otherwise."
.ie n .IP """gsl_histogram_add($h1, $h2)"" \- This function adds the contents of the bins in histogram $h2 to the corresponding bins of histogram $h1, i.e. h'_1(i) = h_1(i) + h_2(i). The two histograms must have identical bin ranges." 4
.el .IP "\f(CWgsl_histogram_add($h1, $h2)\fR \- This function adds the contents of the bins in histogram \f(CW$h2\fR to the corresponding bins of histogram \f(CW$h1\fR, i.e. h'_1(i) = h_1(i) + h_2(i). The two histograms must have identical bin ranges." 4
.IX Item "gsl_histogram_add($h1, $h2) - This function adds the contents of the bins in histogram $h2 to the corresponding bins of histogram $h1, i.e. h'_1(i) = h_1(i) + h_2(i). The two histograms must have identical bin ranges."
.ie n .IP """gsl_histogram_sub($h1, $h2)"" \- This function subtracts the contents of the bins in histogram $h2 from the corresponding bins of histogram $h1, i.e. h'_1(i) = h_1(i) \- h_2(i). The two histograms must have identical bin ranges." 4
.el .IP "\f(CWgsl_histogram_sub($h1, $h2)\fR \- This function subtracts the contents of the bins in histogram \f(CW$h2\fR from the corresponding bins of histogram \f(CW$h1\fR, i.e. h'_1(i) = h_1(i) \- h_2(i). The two histograms must have identical bin ranges." 4
.IX Item "gsl_histogram_sub($h1, $h2) - This function subtracts the contents of the bins in histogram $h2 from the corresponding bins of histogram $h1, i.e. h'_1(i) = h_1(i) - h_2(i). The two histograms must have identical bin ranges."
.ie n .IP """gsl_histogram_mul($h1, $h2)"" \- This function multiplies the contents of the bins of histogram $h1 by the contents of the corresponding bins in histogram $h2, i.e. h'_1(i) = h_1(i) * h_2(i). The two histograms must have identical bin ranges." 4
.el .IP "\f(CWgsl_histogram_mul($h1, $h2)\fR \- This function multiplies the contents of the bins of histogram \f(CW$h1\fR by the contents of the corresponding bins in histogram \f(CW$h2\fR, i.e. h'_1(i) = h_1(i) * h_2(i). The two histograms must have identical bin ranges." 4
.IX Item "gsl_histogram_mul($h1, $h2) - This function multiplies the contents of the bins of histogram $h1 by the contents of the corresponding bins in histogram $h2, i.e. h'_1(i) = h_1(i) * h_2(i). The two histograms must have identical bin ranges."
.ie n .IP """gsl_histogram_div($h1, $h2)"" \- This function divides the contents of the bins of histogram $h1 by the contents of the corresponding bins in histogram $h2, i.e. h'_1(i) = h_1(i) / h_2(i). The two histograms must have identical bin ranges." 4
.el .IP "\f(CWgsl_histogram_div($h1, $h2)\fR \- This function divides the contents of the bins of histogram \f(CW$h1\fR by the contents of the corresponding bins in histogram \f(CW$h2\fR, i.e. h'_1(i) = h_1(i) / h_2(i). The two histograms must have identical bin ranges." 4
.IX Item "gsl_histogram_div($h1, $h2) - This function divides the contents of the bins of histogram $h1 by the contents of the corresponding bins in histogram $h2, i.e. h'_1(i) = h_1(i) / h_2(i). The two histograms must have identical bin ranges."
.ie n .IP """gsl_histogram_scale($h, $scale)"" \- This function multiplies the contents of the bins of histogram $h by the constant $scale, i.e. h'_1(i) = h_1(i) * scale." 4
.el .IP "\f(CWgsl_histogram_scale($h, $scale)\fR \- This function multiplies the contents of the bins of histogram \f(CW$h\fR by the constant \f(CW$scale\fR, i.e. h'_1(i) = h_1(i) * scale." 4
.IX Item "gsl_histogram_scale($h, $scale) - This function multiplies the contents of the bins of histogram $h by the constant $scale, i.e. h'_1(i) = h_1(i) * scale."
.ie n .IP """gsl_histogram_shift($h, $offset)"" \- This function shifts the contents of the bins of histogram $h by the constant $offset, i.e. h'_1(i) = h_1(i) + offset." 4
.el .IP "\f(CWgsl_histogram_shift($h, $offset)\fR \- This function shifts the contents of the bins of histogram \f(CW$h\fR by the constant \f(CW$offset\fR, i.e. h'_1(i) = h_1(i) + offset." 4
.IX Item "gsl_histogram_shift($h, $offset) - This function shifts the contents of the bins of histogram $h by the constant $offset, i.e. h'_1(i) = h_1(i) + offset."
.ie n .IP """gsl_histogram_sigma($h)"" \- This function returns the standard deviation of the histogrammed variable, where the histogram is regarded as a probability distribution. Negative bin values are ignored for the purposes of this calculation. The accuracy of the result is limited by the bin width." 4
.el .IP "\f(CWgsl_histogram_sigma($h)\fR \- This function returns the standard deviation of the histogrammed variable, where the histogram is regarded as a probability distribution. Negative bin values are ignored for the purposes of this calculation. The accuracy of the result is limited by the bin width." 4
.IX Item "gsl_histogram_sigma($h) - This function returns the standard deviation of the histogrammed variable, where the histogram is regarded as a probability distribution. Negative bin values are ignored for the purposes of this calculation. The accuracy of the result is limited by the bin width."
.ie n .IP """gsl_histogram_mean($h)"" \- This function returns the mean of the histogrammed variable, where the histogram is regarded as a probability distribution. Negative bin values are ignored for the purposes of this calculation. The accuracy of the result is limited by the bin width." 4
.el .IP "\f(CWgsl_histogram_mean($h)\fR \- This function returns the mean of the histogrammed variable, where the histogram is regarded as a probability distribution. Negative bin values are ignored for the purposes of this calculation. The accuracy of the result is limited by the bin width." 4
.IX Item "gsl_histogram_mean($h) - This function returns the mean of the histogrammed variable, where the histogram is regarded as a probability distribution. Negative bin values are ignored for the purposes of this calculation. The accuracy of the result is limited by the bin width."
.ie n .IP """gsl_histogram_sum($h)"" \- This function returns the sum of all bin values. Negative bin values are included in the sum." 4
.el .IP "\f(CWgsl_histogram_sum($h)\fR \- This function returns the sum of all bin values. Negative bin values are included in the sum." 4
.IX Item "gsl_histogram_sum($h) - This function returns the sum of all bin values. Negative bin values are included in the sum."
.ie n .IP """gsl_histogram_fwrite($stream, $h)"" \- This function writes the ranges and bins of the histogram $h to the stream $stream, which has been opened by the gsl_fopen function from the Math::GSL module, in binary format. The return value is 0 for success and $GSL_EFAILED if there was a problem writing to the file. Since the data is written in the native binary format it may not be portable between different architectures." 4
.el .IP "\f(CWgsl_histogram_fwrite($stream, $h)\fR \- This function writes the ranges and bins of the histogram \f(CW$h\fR to the stream \f(CW$stream\fR, which has been opened by the gsl_fopen function from the Math::GSL module, in binary format. The return value is 0 for success and \f(CW$GSL_EFAILED\fR if there was a problem writing to the file. Since the data is written in the native binary format it may not be portable between different architectures." 4
.IX Item "gsl_histogram_fwrite($stream, $h) - This function writes the ranges and bins of the histogram $h to the stream $stream, which has been opened by the gsl_fopen function from the Math::GSL module, in binary format. The return value is 0 for success and $GSL_EFAILED if there was a problem writing to the file. Since the data is written in the native binary format it may not be portable between different architectures."
.ie n .IP """gsl_histogram_fread($stream, $h)"" \- This function reads into the histogram $h from the open stream $stream, which has been opened by the gsl_fopen function from the Math::GSL module,  in binary format. The histogram $h must be preallocated with the correct size since the function uses the number of bins in $h to determine how many bytes to read. The return value is 0 for success and $GSL_EFAILED if there was a problem reading from the file. The data is assumed to have been written in the native binary format on the same architecture." 4
.el .IP "\f(CWgsl_histogram_fread($stream, $h)\fR \- This function reads into the histogram \f(CW$h\fR from the open stream \f(CW$stream\fR, which has been opened by the gsl_fopen function from the Math::GSL module,  in binary format. The histogram \f(CW$h\fR must be preallocated with the correct size since the function uses the number of bins in \f(CW$h\fR to determine how many bytes to read. The return value is 0 for success and \f(CW$GSL_EFAILED\fR if there was a problem reading from the file. The data is assumed to have been written in the native binary format on the same architecture." 4
.IX Item "gsl_histogram_fread($stream, $h) - This function reads into the histogram $h from the open stream $stream, which has been opened by the gsl_fopen function from the Math::GSL module,  in binary format. The histogram $h must be preallocated with the correct size since the function uses the number of bins in $h to determine how many bytes to read. The return value is 0 for success and $GSL_EFAILED if there was a problem reading from the file. The data is assumed to have been written in the native binary format on the same architecture."
.ie n .IP """gsl_histogram_fprintf($stream, $h, $range_format, $bin_format)"" \- This function writes the ranges and bins of the histogram $h line-by-line to the stream $stream (from the gsl_fopen function from the Math::GSL module) using the format specifiers $range_format and $bin_format. These should be one of the %g, %e or %f formats for floating point numbers. The function returns 0 for success and $GSL_EFAILED if there was a problem writing to the file. The histogram output is formatted in three columns, and the columns are separated by spaces, like this," 4
.el .IP "\f(CWgsl_histogram_fprintf($stream, $h, $range_format, $bin_format)\fR \- This function writes the ranges and bins of the histogram \f(CW$h\fR line-by-line to the stream \f(CW$stream\fR (from the gsl_fopen function from the Math::GSL module) using the format specifiers \f(CW$range_format\fR and \f(CW$bin_format\fR. These should be one of the \f(CW%g\fR, \f(CW%e\fR or \f(CW%f\fR formats for floating point numbers. The function returns 0 for success and \f(CW$GSL_EFAILED\fR if there was a problem writing to the file. The histogram output is formatted in three columns, and the columns are separated by spaces, like this," 4
.IX Item "gsl_histogram_fprintf($stream, $h, $range_format, $bin_format) - This function writes the ranges and bins of the histogram $h line-by-line to the stream $stream (from the gsl_fopen function from the Math::GSL module) using the format specifiers $range_format and $bin_format. These should be one of the %g, %e or %f formats for floating point numbers. The function returns 0 for success and $GSL_EFAILED if there was a problem writing to the file. The histogram output is formatted in three columns, and the columns are separated by spaces, like this,"
.RS 4
.IP "range[0] range[1] bin[0]" 4
.IX Item "range[0] range[1] bin[0]"
.IP "range[1] range[2] bin[1]" 4
.IX Item "range[1] range[2] bin[1]"
.IP "range[2] range[3] bin[2]" 4
.IX Item "range[2] range[3] bin[2]"
.IP "...." 4
.IP "range[n\-1] range[n] bin[n\-1]" 4
.IX Item "range[n-1] range[n] bin[n-1]"
.RE
.RS 4
.PD
.Sp
The values of the ranges are formatted using range_format and the value of the bins are formatted using bin_format. Each line contains the lower and upper limit of the range of the bins and the value of the bin itself. Since the upper limit of one bin is the lower limit of the next there is duplication of these values between lines but this allows the histogram to be manipulated with line-oriented tools.
.RE
.ie n .IP """gsl_histogram_fscanf($stream, $h)"" \- This function reads formatted data from the stream $stream, which has been opened by the gsl_fopen function from the Math::GSL module, into the histogram $h. The data is assumed to be in the three-column format used by gsl_histogram_fprintf. The histogram $h must be preallocated with the correct length since the function uses the size of $h to determine how many numbers to read. The function returns 0 for success and $GSL_EFAILED if there was a problem reading from the file." 4
.el .IP "\f(CWgsl_histogram_fscanf($stream, $h)\fR \- This function reads formatted data from the stream \f(CW$stream\fR, which has been opened by the gsl_fopen function from the Math::GSL module, into the histogram \f(CW$h\fR. The data is assumed to be in the three-column format used by gsl_histogram_fprintf. The histogram \f(CW$h\fR must be preallocated with the correct length since the function uses the size of \f(CW$h\fR to determine how many numbers to read. The function returns 0 for success and \f(CW$GSL_EFAILED\fR if there was a problem reading from the file." 4
.IX Item "gsl_histogram_fscanf($stream, $h) - This function reads formatted data from the stream $stream, which has been opened by the gsl_fopen function from the Math::GSL module, into the histogram $h. The data is assumed to be in the three-column format used by gsl_histogram_fprintf. The histogram $h must be preallocated with the correct length since the function uses the size of $h to determine how many numbers to read. The function returns 0 for success and $GSL_EFAILED if there was a problem reading from the file."
.PD 0
.ie n .IP """gsl_histogram_pdf_alloc($n)"" \- This function allocates memory for a probability distribution with $n bins and returns a pointer to a newly initialized gsl_histogram_pdf struct. If insufficient memory is available a null pointer is returned and the error handler is invoked with an error code of $GSL_ENOMEM." 4
.el .IP "\f(CWgsl_histogram_pdf_alloc($n)\fR \- This function allocates memory for a probability distribution with \f(CW$n\fR bins and returns a pointer to a newly initialized gsl_histogram_pdf struct. If insufficient memory is available a null pointer is returned and the error handler is invoked with an error code of \f(CW$GSL_ENOMEM\fR." 4
.IX Item "gsl_histogram_pdf_alloc($n) - This function allocates memory for a probability distribution with $n bins and returns a pointer to a newly initialized gsl_histogram_pdf struct. If insufficient memory is available a null pointer is returned and the error handler is invoked with an error code of $GSL_ENOMEM."
.ie n .IP """gsl_histogram_pdf_init($p, $h)"" \- This function initializes the probability distribution $p with the contents of the histogram $h. If any of the bins of $h are negative then the error handler is invoked with an error code of $GSL_EDOM because a probability distribution cannot contain negative values." 4
.el .IP "\f(CWgsl_histogram_pdf_init($p, $h)\fR \- This function initializes the probability distribution \f(CW$p\fR with the contents of the histogram \f(CW$h\fR. If any of the bins of \f(CW$h\fR are negative then the error handler is invoked with an error code of \f(CW$GSL_EDOM\fR because a probability distribution cannot contain negative values." 4
.IX Item "gsl_histogram_pdf_init($p, $h) - This function initializes the probability distribution $p with the contents of the histogram $h. If any of the bins of $h are negative then the error handler is invoked with an error code of $GSL_EDOM because a probability distribution cannot contain negative values."
.ie n .IP """gsl_histogram_pdf_free($p)"" \- This function frees the probability distribution function $p and all of the memory associated with it." 4
.el .IP "\f(CWgsl_histogram_pdf_free($p)\fR \- This function frees the probability distribution function \f(CW$p\fR and all of the memory associated with it." 4
.IX Item "gsl_histogram_pdf_free($p) - This function frees the probability distribution function $p and all of the memory associated with it."
.ie n .IP """gsl_histogram_pdf_sample($p, $r)"" \-     This function uses $r, a uniform random number between zero and one, to compute a single random sample from the probability distribution $p. The algorithm used to compute the sample s is given by the following formula, s = range[i] + delta * (range[i+1] \- range[i]) where i is the index which satisfies sum[i] <= r < sum[i+1] and delta is (r \- sum[i])/(sum[i+1] \- sum[i])." 4
.el .IP "\f(CWgsl_histogram_pdf_sample($p, $r)\fR \-     This function uses \f(CW$r\fR, a uniform random number between zero and one, to compute a single random sample from the probability distribution \f(CW$p\fR. The algorithm used to compute the sample s is given by the following formula, s = range[i] + delta * (range[i+1] \- range[i]) where i is the index which satisfies sum[i] <= r < sum[i+1] and delta is (r \- sum[i])/(sum[i+1] \- sum[i])." 4
.IX Item "gsl_histogram_pdf_sample($p, $r) -     This function uses $r, a uniform random number between zero and one, to compute a single random sample from the probability distribution $p. The algorithm used to compute the sample s is given by the following formula, s = range[i] + delta * (range[i+1] - range[i]) where i is the index which satisfies sum[i] <= r < sum[i+1] and delta is (r - sum[i])/(sum[i+1] - sum[i])."
.PD
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 1
\& The following example shows how to create a histogram with logarithmic bins with ranges [1,10), [10,100) and [100,1000).
\&
\& $h = gsl_histogram_alloc (3);
\&             
\& # bin[0] covers the range 1 <= x < 10
\& # bin[1] covers the range 10 <= x < 100
\& # bin[2] covers the range 100 <= x < 1000
\&  
\& $range = [ 1.0, 10.0, 100.0, 1000.0 ];
\&              
\& gsl_histogram_set_ranges($h, $range, 4);
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Jonathan \*(L"Duke\*(R" Leto <jonathan@leto.net> and Thierry Moisan <thierry.moisan@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2008\-2011 Jonathan \*(L"Duke\*(R" Leto and Thierry Moisan
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
