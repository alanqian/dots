.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::GSL::VectorComplex 3pm"
.TH Math::GSL::VectorComplex 3pm "2012-08-17" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::GSL::VectorComplex \- Complex Vectors
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    use Math::GSL::VectorComplex qw/:all/;
\&    my $vec1 = Math::GSL::VectorComplex\->new([1 + 2*i, 7*i, 5, \-3 ]);
\&    my $vec2 = $vec1 * 5;
\&    my $vec3 = Math::GSL::Vector>new(10);   # 10 element zero vector 
\&    my $vec4 = $vec1 + $vec2;
\&
\&    # set the element at index 1 to \-i
\&    # and the element at index 3 to i
\&    $vec3\->set([ 1, \-i ], [ 9, i ]);
\&
\&    my @vec = $vec2\->as_list;               # return elements as Perl list
\&
\&    my $dot_product = $vec1 * $vec2;
\&    my $length      = $vec2\->length;
\&    my $first       = $vec1\->get(0);
.Ve
.SH "Objected Oriented Interface to GSL Math::GSL::VectorComplex"
.IX Header "Objected Oriented Interface to GSL Math::GSL::VectorComplex"
.SS "\fInew()\fP"
.IX Subsection "new()"
Creates a new Vector of the given size.
.PP
.Vb 1
\&    my $vector = Math::GSL::VectorComplex\->new(3);
.Ve
.PP
You can also create and set directly the values of the vector like this :
.PP
.Vb 1
\&   my $vector = Math::GSL::VectorComplex\->new([2,4,1]);
.Ve
.SS "\fIraw()\fP"
.IX Subsection "raw()"
Get the underlying \s-1GSL\s0 vector object created by \s-1SWIG\s0, useful for using gsl_vector_* functions which do not have an \s-1OO\s0 counterpart.
.PP
.Vb 3
\&    my $vector    = Math::GSL::VectorComplex\->new(3);
\&    my $gsl_vector = $vector\->raw;
\&    my $stuff      = gsl_vector_get($gsl_vector, 1);
.Ve
.SS "\fImin()\fP"
.IX Subsection "min()"
Returns the minimum value contained in the vector.
.PP
.Vb 2
\&   my $vector = Math::GSL::VectorComplex\->new([2,4,1]);
\&   my $minimum = $vector\->min;
.Ve
.SS "\fImax()\fP"
.IX Subsection "max()"
Returns the minimum value contained in the vector.
.PP
.Vb 2
\&   my $vector = Math::GSL::VectorComplex\->new([2,4,1]);
\&   my $maximum = $vector\->max;
.Ve
.SS "\fIlength()\fP"
.IX Subsection "length()"
Returns the number of elements contained in the vector.
.PP
.Vb 2
\&   my $vector = Math::GSL::VectorComplex\->new([2,4,1]);
\&   my $length = $vector\->length;
.Ve
.SS "\fIas_list()\fP"
.IX Subsection "as_list()"
Gets the content of a Math::GSL::Vector object as a Perl list.
.PP
.Vb 3
\&    my $vector = Math::GSL::VectorComplex\->new(3);
\&    ...
\&    my @values = $vector\->as_list;
.Ve
.SS "\fIget()\fP"
.IX Subsection "get()"
Gets the value of an of a Math::GSL::Vector object.
.PP
.Vb 3
\&    my $vector = Math::GSL::VectorComplex\->new(3);
\&    ...
\&    my @values = $vector\->get(2);
.Ve
.PP
You can also enter an array of indices to receive their corresponding values:
.PP
.Vb 3
\&    my $vector = Math::GSL::VectorComplex\->new(3);
\&    ...
\&    my @values = $vector\->get([0,2]);
.Ve
.SS "\fIreverse()\fP"
.IX Subsection "reverse()"
Returns the a vector with the elements in reversed order.
.PP
.Vb 3
\&    use Math::Complex;
\&    my $v1 = Math::GSL::VectorComplex\->new([ 1, 2, 3*i]);
\&    my $v2 = $v1\->reverse;
.Ve
.SS "\fIset()\fP"
.IX Subsection "set()"
Sets values of an of a Math::GSL::Vector object.
.PP
.Vb 2
\&    my $vector = Math::GSL::VectorComplex\->new(3);
\&    $vector\->set([1,2], [8,23]);
.Ve
.PP
This sets the second and third value to 8 and 23.
.SS "\fIcopy()\fP"
.IX Subsection "copy()"
Returns a copy of the vector, which has the same length and values but resides at a different location in memory.
.PP
.Vb 2
\&    my $vector = Math::GSL::VectorComplex\->new([10 .. 20]);
\&    my $copy   = $vector\->copy;
.Ve
.SS "\fIswap()\fP"
.IX Subsection "swap()"
Exchanges the values in the vectors \f(CW$v\fR with \f(CW$w\fR by copying.
.PP
.Vb 3
\&    my $v = Math::GSL::VectorComplex\->new([1..5]);
\&    my $w = Math::GSL::VectorComplex\->new([3..7]);
\&    $v\->swap( $w );
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Jonathan \*(L"Duke\*(R" Leto <jonathan@leto.net> and Thierry Moisan <thierry.moisan@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2008\-2011 Jonathan \*(L"Duke\*(R" Leto and Thierry Moisan
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
