.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::GSL::Combination 3pm"
.TH Math::GSL::Combination 3pm "2012-08-17" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::GSL::Combination \- Combinations
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Math::GSL qw/:all/;
\&    use Math::GSL::Combination qw/:all/;
\&
\&    my $c   = Math::GSL::Combination\->new(6,3);
\&    print join (" ", $c\->as_list) . "\en";
\&    $c\->next;
\&    print join (" ", $c\->as_list) . "\en";
\&
\&    my $fd = gsl_fopen(\*(Aqcombination.dat\*(Aq, \*(Aqw\*(Aq);
\&    gsl_combination_fwrite($fd, $c\->raw);
\&    gsl_fclose($fd);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Here is a list of all the functions in this module :
.IP "\(bu" 4
\&\f(CW\*(C`gsl_combination_alloc($n, $k)\*(C'\fR
.Sp
This function allocates memory for a new combination with parameters \f(CW$n\fR, \f(CW$k\fR.
The combination is not initialized and its elements are undefined. Use the
function gsl_combination_calloc if you want to create a combination which is
initialized to the lexicographically first combination.
.IP "\(bu" 4
\&\f(CW\*(C`gsl_combination_calloc($n, $k)\*(C'\fR
.Sp
This function allocates memory for a new combination with parameters \f(CW$n\fR, \f(CW$k\fR and
initializes it to the lexicographically first combination.
.IP "\(bu" 4
\&\f(CW\*(C`gsl_combination_init_first($c)\*(C'\fR
.Sp
This function initializes the combination \f(CW$c\fR to the lexicographically first
combination, i.e. (0,1,2,...,k\-1).
.IP "\(bu" 4
\&\f(CW\*(C`gsl_combination_init_last($c)\*(C'\fR
.Sp
This function initializes the combination \f(CW$c\fR to the lexicographically last
combination, i.e. (n\-k,n\-k+1,...,n\-1).
.IP "\(bu" 4
\&\f(CW\*(C`gsl_combination_free($c)\*(C'\fR
.Sp
This function frees all the memory used by the combination \f(CW$c\fR.
.IP "\(bu" 4
\&\f(CW\*(C`gsl_combination_memcpy($dest, $src)\*(C'\fR
.Sp
This function copies the elements of the combination \f(CW$src\fR into the combination
\&\f(CW$dest\fR. The two combinations must have the same size.
.IP "\(bu" 4
\&\f(CW\*(C`gsl_combination_get($c, $i)\*(C'\fR
.Sp
This function returns the value of the i\-th element of the combination \f(CW$c\fR. If
\&\f(CW$i\fR lies outside the allowed range of 0 to k\-1 then the error handler is invoked
and 0 is returned.
.IP "\(bu" 4
\&\f(CW\*(C`gsl_combination_fwrite($stream, $c)\*(C'\fR
.Sp
This function writes the elements of the combination \f(CW$c\fR to the stream \f(CW$stream\fR,
opened with the gsl_fopen function from the Math::GSL module, in binary format.
The function returns \f(CW$GSL_EFAILED\fR if there was a problem writing to the file.
Since the data is written in the native binary format it may not be portable
between different architectures.
.IP "\(bu" 4
\&\f(CW\*(C`gsl_combination_fread($stream, $c)\*(C'\fR
.Sp
This function reads elements from the open stream \f(CW$stream\fR, opened with the
gsl_fopen function from the Math::GSL module, into the combination \f(CW$c\fR in binary
format. The combination \f(CW$c\fR must be preallocated with correct values of n and k
since the function uses the size of \f(CW$c\fR to determine how many bytes to read. The
function returns \f(CW$GSL_EFAILED\fR if there was a problem reading from the file. The
data is assumed to have been written in the native binary format on the same
architecture.
.IP "\(bu" 4
\&\f(CW\*(C`gsl_combination_fprintf($stream, $c, $format)\*(C'\fR
.Sp
This function writes the elements of the combination \f(CW$c\fR line-by-line to the
stream \f(CW$stream\fR, opened with the gsl_fopen function from the Math::GSL module,
using the format specifier \f(CW$format\fR, which should be suitable for a type of
size_t. In \s-1ISO\s0 C99 the type modifier z represents size_t, so \*(L"%zu\en\*(R" is a
suitable format. The function returns \f(CW$GSL_EFAILED\fR if there was a problem
writing to the file.
.IP "\(bu" 4
\&\f(CW\*(C`gsl_combination_fscanf($stream, $c)\*(C'\fR
.Sp
This function reads formatted data from the stream \f(CW$stream\fR into the combination
\&\f(CW$c\fR. The combination \f(CW$c\fR must be preallocated with correct values of n and k
since the function uses the size of \f(CW$c\fR to determine how many numbers to read.
The function returns \f(CW$GSL_EFAILED\fR if there was a problem reading from the file.
.IP "\(bu" 4
\&\f(CW\*(C`gsl_combination_n($c)\*(C'\fR
.Sp
This function returns the range (n) of the combination \f(CW$c\fR.
.IP "\(bu" 4
\&\f(CW\*(C`gsl_combination_k($c)\*(C'\fR
.Sp
This function returns the number of elements (k) in the combination \f(CW$c\fR.
.IP "\(bu" 4
\&\f(CW\*(C`gsl_combination_data($c)\*(C'\fR
.Sp
This function returns a pointer to the array of elements in the combination \f(CW$c\fR.
.IP "\(bu" 4
\&\f(CW\*(C`gsl_combination_valid($c)\*(C'\fR
.Sp
This function checks that the combination \f(CW$c\fR is valid. The k elements should
lie in the range 0 to n\-1, with each value occurring once at most and in
increasing order.
.IP "\(bu" 4
\&\f(CW\*(C`gsl_combination_next($c)\*(C'\fR
.Sp
This function advances the combination \f(CW$c\fR to the next combination in
lexicographic order and returns \f(CW$GSL_SUCCESS\fR. If no further combinations are
available it returns \f(CW$GSL_FAILURE\fR and leaves \f(CW$c\fR unmodified. Starting with the
first combination and repeatedly applying this function will iterate through
all possible combinations of a given order.
.IP "\(bu" 4
\&\f(CW\*(C`gsl_combination_prev($c)\*(C'\fR
.Sp
This function steps backwards from the combination \f(CW$c\fR to the previous
combination in lexicographic order, returning \f(CW$GSL_SUCCESS\fR. If no previous
combination is available it returns \f(CW$GSL_FAILURE\fR and leaves \f(CW$c\fR unmodified.
.SH "MORE INFO"
.IX Header "MORE INFO"
For more informations on the functions, we refer you to the \s-1GSL\s0 offcial
documentation: <http://www.gnu.org/software/gsl/manual/html_node/>
.SH "AUTHORS"
.IX Header "AUTHORS"
Jonathan \*(L"Duke\*(R" Leto <jonathan@leto.net> and Thierry Moisan <thierry.moisan@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2008\-2011 Jonathan \*(L"Duke\*(R" Leto and Thierry Moisan
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
