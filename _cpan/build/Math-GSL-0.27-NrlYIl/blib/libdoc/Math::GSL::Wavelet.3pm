.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::GSL::Wavelet 3pm"
.TH Math::GSL::Wavelet 3pm "2012-08-17" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::GSL::Wavelet \- 1\-D (Real) Wavelets
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Math::GSL::Wavelet qw/:all/;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.ie n .IP """gsl_wavelet_alloc($T, $k)""" 1
.el .IP "\f(CWgsl_wavelet_alloc($T, $k)\fR" 1
.IX Item "gsl_wavelet_alloc($T, $k)"
This function allocates and initializes a wavelet object of type \f(CW$T\fR, where \f(CW$T\fR
must be one of the constants below. The parameter \f(CW$k\fR selects the specific member
of the wavelet family.
.ie n .IP """gsl_wavelet_free($w)""" 1
.el .IP "\f(CWgsl_wavelet_free($w)\fR" 1
.IX Item "gsl_wavelet_free($w)"
This function frees the wavelet object \f(CW$w\fR.
.ie n .IP """gsl_wavelet_name""" 1
.el .IP "\f(CWgsl_wavelet_name\fR" 1
.IX Item "gsl_wavelet_name"
.PD 0
.ie n .IP """gsl_wavelet_workspace_alloc($n)""" 1
.el .IP "\f(CWgsl_wavelet_workspace_alloc($n)\fR" 1
.IX Item "gsl_wavelet_workspace_alloc($n)"
.PD
This function allocates a workspace for the discrete wavelet transform. To
perform a one-dimensional transform on \f(CW$n\fR elements, a workspace of size \f(CW$n\fR must
be provided. For two-dimensional transforms of \f(CW$n\fR\-by\-$n matrices it is
sufficient to allocate a workspace of size \f(CW$n\fR, since the transform operates on
individual rows and columns.
.ie n .IP """gsl_wavelet_workspace_free($work)""" 1
.el .IP "\f(CWgsl_wavelet_workspace_free($work)\fR" 1
.IX Item "gsl_wavelet_workspace_free($work)"
This function frees the allocated workspace work.
.ie n .IP """gsl_wavelet_transform""" 1
.el .IP "\f(CWgsl_wavelet_transform\fR" 1
.IX Item "gsl_wavelet_transform"
.PD 0
.ie n .IP """gsl_wavelet_transform_forward($w, $data, $stride, $n, $work)""" 1
.el .IP "\f(CWgsl_wavelet_transform_forward($w, $data, $stride, $n, $work)\fR" 1
.IX Item "gsl_wavelet_transform_forward($w, $data, $stride, $n, $work)"
.PD
This functions compute in-place forward discrete wavelet transforms of length \f(CW$n\fR
with stride \f(CW$stride\fR on the array \f(CW$data\fR. The length of the transform \f(CW$n\fR is
restricted to powers of two. For the forward transform, the elements of the
original array are replaced by the discrete wavelet transform f_i \-> w_{j,k} in
a packed triangular storage layout, where j is the index of the level j = 0 ...
J\-1 and k is the index of the coefficient within each level, k = 0 ... (2^j)\-1.
The total number of levels is J = \elog_2(n). The output data has the following
form,
.RS 1
.Sp
.Vb 1
\&    (s_{\-1,0}, d_{0,0}, d_{1,0}, d_{1,1}, d_{2,0}, ..., d_{j,k}, ..., d_{J\-1,2^{J\-1}\-1})
.Ve
.RE
.RS 1
.Sp
where the first element is the smoothing coefficient s_{\-1,0}, followed by the
detail coefficients d_{j,k} for each level j. The backward transform inverts
these coefficients to obtain the original data. These functions return a status
of \f(CW$GSL_SUCCESS\fR upon successful completion. \f(CW$GSL_EINVAL\fR is returned if \f(CW$n\fR is not
an integer power of 2 or if insufficient workspace is provided.
.RE
.ie n .IP """gsl_wavelet_transform_inverse""" 1
.el .IP "\f(CWgsl_wavelet_transform_inverse\fR" 1
.IX Item "gsl_wavelet_transform_inverse"
.PP
This module also contains the following constants with their valid k value for
the gsl_wavelet_alloc function :
.ie n .IP "$gsl_wavelet_daubechies" 1
.el .IP "\f(CW$gsl_wavelet_daubechies\fR" 1
.IX Item "$gsl_wavelet_daubechies"
.PD 0
.ie n .IP "$gsl_wavelet_daubechies_centered" 1
.el .IP "\f(CW$gsl_wavelet_daubechies_centered\fR" 1
.IX Item "$gsl_wavelet_daubechies_centered"
.PD
.PP
This is the Daubechies wavelet family of maximum phase with k/2 vanishing
moments. The implemented wavelets are k=4, 6, ..., 20, with k even.
.ie n .IP "$gsl_wavelet_haar" 1
.el .IP "\f(CW$gsl_wavelet_haar\fR" 1
.IX Item "$gsl_wavelet_haar"
.PD 0
.ie n .IP "$gsl_wavelet_haar_centered" 1
.el .IP "\f(CW$gsl_wavelet_haar_centered\fR" 1
.IX Item "$gsl_wavelet_haar_centered"
.PD
.PP
This is the Haar wavelet. The only valid choice of k for the Haar wavelet is k=2.
.ie n .IP "$gsl_wavelet_bspline" 1
.el .IP "\f(CW$gsl_wavelet_bspline\fR" 1
.IX Item "$gsl_wavelet_bspline"
.PD 0
.ie n .IP "$gsl_wavelet_bspline_centered" 1
.el .IP "\f(CW$gsl_wavelet_bspline_centered\fR" 1
.IX Item "$gsl_wavelet_bspline_centered"
.PD
.PP
This is the biorthogonal B\-spline wavelet family of order (i,j). The implemented
values of k = 100*i + j are 103, 105, 202, 204, 206, 208, 301, 303, 305 307,
309.
.SH "AUTHORS"
.IX Header "AUTHORS"
Jonathan \*(L"Duke\*(R" Leto <jonathan@leto.net> and Thierry Moisan <thierry.moisan@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2008\-2011 Jonathan \*(L"Duke\*(R" Leto and Thierry Moisan
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
