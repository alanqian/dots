.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::GSL::Sort 3pm"
.TH Math::GSL::Sort 3pm "2012-08-17" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::GSL::Sort \- Functions for sorting data
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    use Math::GSL::Sort qw/:all/;
\&    my $x       = [ 2**15, 1.67, 20e5, \-17, 6900, 1/3 , 42e\-10 ];
\&    my $sorted  = gsl_sort($x, 1, $#$x+1 );
\&    my $numbers = [ map { rand(100) } (1..100) ];
\&    my ($status, $smallest10) = gsl_sort_smallest($array, 10, $x, 1, $#$x+1);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.IP "\(bu" 4
gsl_sort_vector($v)
.Sp
This function sorts the elements of the vector \f(CW$v\fR into ascending numerical
order.
.IP "\(bu" 4
gsl_sort_vector_index($p, \f(CW$v\fR)
.Sp
This function indirectly sorts the elements of the vector \f(CW$v\fR into ascending
order, storing the resulting permutation in \f(CW$p\fR. The elements of \f(CW$p\fR give the
index of the vector element which would have been stored in that position if
the vector had been sorted in place. The first element of \f(CW$p\fR gives the index
of the least element in \f(CW$v\fR, and the last element of \f(CW$p\fR gives the index of the
greatest element in \f(CW$v\fR. The vector \f(CW$v\fR is not changed.
.IP "\(bu" 4
gsl_sort_vector_smallest($array, \f(CW$k\fR, \f(CW$vector\fR)
.Sp
This function outputs 0 if the operation succeeded, 1 otherwise and then the
\&\f(CW$k\fR smallest elements of the vector \f(CW$v\fR. \f(CW$k\fR must be less than or equal to the
length of the vector \f(CW$v\fR.
.IP "\(bu" 4
gsl_sort_vector_smallest_index($p, \f(CW$k\fR, \f(CW$v\fR)
.Sp
This function outputs 0 if the operation succeeded, 1 otherwise and then the
indices of the \f(CW$k\fR smallest elements of the vector \f(CW$v\fR. \f(CW$p\fR must be a prealocated
array reference. This should be removed in further versions. \f(CW$k\fR must be less
than or equal to the length of the vector \f(CW$v\fR.
.IP "\(bu" 4
gsl_sort_vector_largest($array, \f(CW$k\fR, \f(CW$vector\fR)
.Sp
This function outputs 0 if the operation succeeded, 1 otherwise and then the
\&\f(CW$k\fR largest elements of the vector \f(CW$v\fR. \f(CW$k\fR must be less than or equal to the
length of the vector \f(CW$v\fR.
.IP "\(bu" 4
gsl_sort_vector_largest_index($p, \f(CW$k\fR, \f(CW$v\fR)
.Sp
This function outputs 0 if the operation succeeded, 1 otherwise and then the
indices of the \f(CW$k\fR largest elements of the vector \f(CW$v\fR. \f(CW$p\fR must be a prealocated
array reference. This should be removed in further versions. \f(CW$k\fR must be less
than or equal to the length of the vector \f(CW$v\fR.
.IP "\(bu" 4
gsl_sort($data, \f(CW$stride\fR, \f(CW$n\fR)
.Sp
This function returns an array reference to the sorted \f(CW$n\fR elements of the
array \f(CW$data\fR with stride \f(CW$stride\fR into ascending numerical order.
.IP "\(bu" 4
gsl_sort_index($p, \f(CW$data\fR, \f(CW$stride\fR, \f(CW$n\fR)
.Sp
This function indirectly sorts the \f(CW$n\fR elements of the array \f(CW$data\fR with stride
\&\f(CW$stride\fR into ascending order, outputting the permutation in the foram of an
array. \f(CW$p\fR must be a prealocated array reference. This should be removed in
further versions. The array \f(CW$data\fR is not changed.
.IP "\(bu" 4
gsl_sort_smallest($array, \f(CW$k\fR, \f(CW$data\fR, \f(CW$stride\fR, \f(CW$n\fR)
.Sp
This function outputs 0 if the operation succeeded, 1 otherwise and then the
\&\f(CW$k\fR smallest elements of the array \f(CW$data\fR, of size \f(CW$n\fR and stride \f(CW$stride\fR, in
ascending numerical. The size \f(CW$k\fR of the subset must be less than or equal to
\&\f(CW$n\fR. The data \f(CW$src\fR is not modified by this operation. \f(CW$array\fR must be a
prealocated array reference. This should be removed in further versions.
.IP "\(bu" 4
gsl_sort_smallest_index($p, \f(CW$k\fR, \f(CW$src\fR, \f(CW$stride\fR, \f(CW$n\fR)
.Sp
This function outputs 0 if the operation succeeded, 1 otherwise and then the
indices of the \f(CW$k\fR smallest elements of the array \f(CW$src\fR, of size \f(CW$n\fR and stride
\&\f(CW$stride\fR. The indices are chosen so that the corresponding data is in ascending
numerical order. \f(CW$k\fR must be less than or equal to \f(CW$n\fR. The data \f(CW$src\fR is not
modified by this operation. \f(CW$p\fR must be a prealocated array reference. This
should be removed in further versions.
.IP "\(bu" 4
gsl_sort_largest($array, \f(CW$k\fR, \f(CW$data\fR, \f(CW$stride\fR, \f(CW$n\fR)
.Sp
This function outputs 0 if the operation succeeded, 1 otherwise and then the
\&\f(CW$k\fR largest elements of the array \f(CW$data\fR, of size \f(CW$n\fR and stride \f(CW$stride\fR, in
ascending numerical. The size \f(CW$k\fR of the subset must be less than or equal to
\&\f(CW$n\fR. The data \f(CW$src\fR is not modified by this operation. \f(CW$array\fR must be a
prealocated array reference. This should be removed in further versions.
.IP "\(bu" 4
gsl_sort_largest_index($p, \f(CW$k\fR, \f(CW$src\fR, \f(CW$stride\fR, \f(CW$n\fR)
.Sp
This function outputs 0 if the operation succeeded, 1 otherwise and then the
indices of the \f(CW$k\fR largest elements of the array \f(CW$src\fR, of size \f(CW$n\fR and stride
\&\f(CW$stride\fR. The indices are chosen so that the corresponding data is in ascending
numerical order. \f(CW$k\fR must be less than or equal to \f(CW$n\fR. The data \f(CW$src\fR is not
modified by this operation. \f(CW$p\fR must be a prealocated array reference. This
should be removed in further versions.
.PP
.Vb 1
\& Here is a complete list of all tags for this module :
.Ve
.IP "all" 4
.IX Item "all"
.PD 0
.IP "plain" 4
.IX Item "plain"
.IP "vector" 4
.IX Item "vector"
.PD
.PP
For more informations on the functions, we refer you to the \s-1GSL\s0 offcial
documentation: <http://www.gnu.org/software/gsl/manual/html_node/>
.SH "PERFORMANCE"
.IX Header "PERFORMANCE"
In the source code of Math::GSL, the file \*(L"examples/benchmark/sort\*(R" compares
the performance of \fIgsl_sort()\fR to Perl's builtin \fIsort()\fR function. It's first
argument is the number of iterations and the second is the size of the array
of numbers to sort. For example, to see a benchmark of 1000 iterations for 
arrays of size 50000 you would type
.PP
.Vb 1
\&    ./examples/benchmark/sort 1000 50000
.Ve
.PP
Initial benchmarks indicate just slightly above a 2x performance increase
over \fIsort()\fR for arrays of between 5000 and 50000 elements. This may mostly
be due to the fact that \fIgsl_sort()\fR takes and returns a reference while \fIsort()\fR
takes and returns a plain list.
.SH "AUTHORS"
.IX Header "AUTHORS"
Jonathan \*(L"Duke\*(R" Leto <jonathan@leto.net> and Thierry Moisan <thierry.moisan@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2008\-2011 Jonathan \*(L"Duke\*(R" Leto and Thierry Moisan
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
