.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::GSL::Sys 3pm"
.TH Math::GSL::Sys 3pm "2012-08-17" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::GSL::Sys \- Misc Math Functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Math::GSL::Sys qw/:all/;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains various useful math functions that are not usually
provided by standard libraries.
.IP "\(bu" 4
\&\f(CW\*(C`gsl_log1p($x)\*(C'\fR
.Sp
This function computes the value of \elog(1+$x) in a way that is accurate for
small \f(CW$x\fR. It provides an alternative to the \s-1BSD\s0 math function log1p(x).
.IP "\(bu" 4
\&\f(CW\*(C`gsl_expm1($x)\*(C'\fR
.Sp
This function computes the value of \eexp($x)\-1 in a way that is accurate for
small \f(CW$x\fR. It provides an alternative to the \s-1BSD\s0 math function expm1(x).
.IP "\(bu" 4
\&\f(CW\*(C`gsl_hypot($x, $y)\*(C'\fR
.Sp
This function computes the value of \esqrt{$x^2 + \f(CW$y\fR^2} in a way that avoids
overflow. It provides an alternative to the \s-1BSD\s0 math function hypot($x,$y).
.IP "\(bu" 4
\&\f(CW\*(C`gsl_hypot3($x, $y, $z)\*(C'\fR
.Sp
This function computes the value of \esqrt{$x^2 + \f(CW$y\fR^2 + \f(CW$z\fR^2} in a way that
avoids overflow.
.IP "\(bu" 4
\&\f(CW\*(C`gsl_acosh($x)\*(C'\fR
.Sp
This function computes the value of \earccosh($x). It provides an alternative to
the standard math function acosh($x).
.IP "\(bu" 4
\&\f(CW\*(C`gsl_asinh($x)\*(C'\fR
.Sp
This function computes the value of \earcsinh($x). It provides an alternative to
the standard math function asinh($x).
.IP "\(bu" 4
\&\f(CW\*(C`gsl_atanh($x)\*(C'\fR
.Sp
This function computes the value of \earctanh($x). It provides an alternative to
the standard math function atanh($x).
.IP "\(bu" 4
\&\f(CW\*(C`gsl_isnan($x)\*(C'\fR
.Sp
This function returns 1 if \f(CW$x\fR is not-a-number.
.IP "\(bu" 4
\&\f(CW\*(C`gsl_isinf($x)\*(C'\fR
.Sp
This function returns +1 if \f(CW$x\fR is positive infinity, \-1 if \f(CW$x\fR is negative
infinity and 0 otherwise.
.IP "\(bu" 4
\&\f(CW\*(C`gsl_finite($x)\*(C'\fR
.Sp
This function returns 1 if \f(CW$x\fR is a real number, and 0 if it is infinite or not-a-number.
.IP "\(bu" 4
\&\f(CW\*(C`gsl_posinf \*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`gsl_neginf \*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`gsl_fdiv \*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`gsl_coerce_double \*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`gsl_coerce_float \*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`gsl_coerce_long_double \*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`gsl_ldexp($x, $e)\*(C'\fR
.Sp
This function computes the value of \f(CW$x\fR * 2**$e. It provides an alternative to
the standard math function ldexp($x,$e).
.IP "\(bu" 4
\&\f(CW\*(C`gsl_frexp($x)\*(C'\fR
.Sp
This function splits the number \f(CW$x\fR into its normalized fraction f and exponent
e, such that \f(CW$x\fR = f * 2^e and 0.5 <= f < 1. The function returns f and then the
exponent in e. If \f(CW$x\fR is zero, both f and e are set to zero. This function
provides an alternative to the standard math function frexp(x, e).
.IP "\(bu" 4
\&\f(CW\*(C`gsl_fcmp($x, $y, $epsilon)\*(C'\fR
.Sp
This function determines whether \f(CW$x\fR and \f(CW$y\fR are approximately equal to a
relative accuracy \f(CW$epsilon\fR. The relative accuracy is measured using an interval
of size 2 \edelta, where \edelta = 2^k \eepsilon and k is the maximum base\-2
exponent of \f(CW$x\fR and \f(CW$y\fR as computed by the function frexp. If \f(CW$x\fR and \f(CW$y\fR lie
within this interval, they are considered approximately equal and the function
returns 0. Otherwise if \f(CW$x\fR < \f(CW$y\fR, the function returns \-1, or if \f(CW$x\fR > \f(CW$y\fR, the
function returns +1. Note that \f(CW$x\fR and \f(CW$y\fR are compared to relative accuracy, so
this function is not suitable for testing whether a value is approximately
zero. The implementation is based on the package fcmp by T.C. Belding.
.PP
For more informations on the functions, we refer you to the \s-1GSL\s0 offcial
documentation: <http://www.gnu.org/software/gsl/manual/html_node/>
.SH "AUTHORS"
.IX Header "AUTHORS"
Jonathan \*(L"Duke\*(R" Leto <jonathan@leto.net> and Thierry Moisan <thierry.moisan@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2008\-2011 Jonathan \*(L"Duke\*(R" Leto and Thierry Moisan
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
