.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::GSL::Deriv 3pm"
.TH Math::GSL::Deriv 3pm "2012-08-17" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::GSL::Deriv \- Numerical Derivatives
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Math::GSL::Deriv qw/:all/;
\&    use Math::GSL::Errno qw/:all/;
\&
\&    my ($x, $h) = (1.5, 0.01);
\&    my ($status, $val,$err) = gsl_deriv_central ( sub {  sin($_[0]) }, $x, $h); 
\&    my $res = abs($val \- cos($x));
\&    if ($status == $GSL_SUCCESS) {
\&        printf "deriv(sin((%g)) = %.18g, max error=%.18g\en", $x, $val, $err;  
\&        printf "       cos(%g)) = %.18g, residue=  %.18g\en"  , $x, cos($x), $res;
\&    } else {
\&        my $gsl_error = gsl_strerror($status);
\&        print "Numerical Derivative FAILED, reason:\en $gsl_error\en\en";
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module allows you to take the numerical derivative of a Perl subroutine. To find
a numerical derivative you must also specify a point to evaluate the derivative and a
\&\*(L"step size\*(R". The step size is a knob that you can turn to get a more finely or coarse
grained approximation. As the step size \f(CW$h\fR goes to zero, the formal definition of a
derivative is reached, but in practive you must choose a reasonable step size to get
a reasonable answer. Usually something in the range of 1/10 to 1/10000 is sufficient.
.PP
So long as your function returns a single scalar value, you can differentiate as 
complicated a function as your heart desires.
.IP "\(bu" 4
\&\f(CW\*(C`gsl_deriv_central($function, $x, $h)\*(C'\fR
.Sp
.Vb 3
\&    use Math::GSL::Deriv qw/gsl_deriv_central/;
\&    my ($x, $h) = (1.5, 0.01);
\&    sub func { my $x=shift; $x**4 \- 15 * $x + sqrt($x) };
\&
\&    my ($status, $val,$err) = gsl_deriv_central ( \e&func , $x, $h);
.Ve
.Sp
This method approximates the central difference of the subroutine reference
\&\f(CW$function\fR, evaluated at \f(CW$x\fR, with \*(L"step size\*(R" \f(CW$h\fR. This means that the
function is evaluated at \f(CW$x\fR\-$h and \f(CW$x\fR+h.
.IP "\(bu" 4
\&\f(CW\*(C`gsl_deriv_backward($function, $x, $h)\*(C'\fR
.Sp
.Vb 3
\&    use Math::GSL::Deriv qw/gsl_deriv_backward/;
\&    my ($x, $h) = (1.5, 0.01);
\&    sub func { my $x=shift; $x**4 \- 15 * $x + sqrt($x) };
\&
\&    my ($status, $val,$err) = gsl_deriv_backward ( \e&func , $x, $h);
.Ve
.Sp
This method approximates the backward difference of the subroutine
reference \f(CW$function\fR, evaluated at \f(CW$x\fR, with \*(L"step size\*(R" \f(CW$h\fR. This means that
the function is evaluated at \f(CW$x\fR\-$h and \f(CW$x\fR.
.IP "\(bu" 4
\&\f(CW\*(C`gsl_deriv_forward($function, $x, $h)\*(C'\fR
.Sp
.Vb 3
\&    use Math::GSL::Deriv qw/gsl_deriv_forward/;
\&    my ($x, $h) = (1.5, 0.01);
\&    sub func { my $x=shift; $x**4 \- 15 * $x + sqrt($x) };
\&
\&    my ($status, $val,$err) = gsl_deriv_forward ( \e&func , $x, $h);
.Ve
.Sp
This method approximates the forward difference of the subroutine reference
\&\f(CW$function\fR, evaluated at \f(CW$x\fR, with \*(L"step size\*(R" \f(CW$h\fR. This means that the
function is evaluated at \f(CW$x\fR and \f(CW$x\fR+$h.
.PP
For more informations on the functions, we refer you to the \s-1GSL\s0 offcial
documentation: <http://www.gnu.org/software/gsl/manual/html_node/>
.SH "AUTHORS"
.IX Header "AUTHORS"
Jonathan \*(L"Duke\*(R" Leto <jonathan@leto.net> and Thierry Moisan <thierry.moisan@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2008\-2011 Jonathan \*(L"Duke\*(R" Leto and Thierry Moisan
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
