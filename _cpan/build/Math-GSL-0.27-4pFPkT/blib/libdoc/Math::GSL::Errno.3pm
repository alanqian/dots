.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Math::GSL::Errno 3pm"
.TH Math::GSL::Errno 3pm "2012-08-17" "perl v5.14.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Math::GSL::Errno \- Error Handling
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Math::GSL::Errno qw/:all/;
\&    gsl_set_error_handler_off();
\&
\&    print gsl_strerror($GSL_EDOM) . "\en";
.Ve
.SH "STATUS CODES"
.IX Header "STATUS CODES"
.IP "\(bu" 4
\&\f(CW$GSL_SUCCESS\fR
.Sp
Success
.IP "\(bu" 4
\&\f(CW$GSL_FAILURE\fR
.Sp
General Failure
.IP "\(bu" 4
\&\f(CW$GSL_CONTINUE\fR
.Sp
Iteration has not converged
.IP "\(bu" 4
\&\f(CW$GSL_EDOM\fR
.Sp
Domain error; used by mathematical functions when an argument value does not fall into the domain over which the function is defined (like \s-1EDOM\s0 in the C library)
.IP "\(bu" 4
\&\f(CW$GSL_ERANGE\fR
.Sp
Range error; used by mathematical functions when the result value is not representable because of overflow or underflow (like \s-1ERANGE\s0 in the C library)
.IP "\(bu" 4
\&\f(CW$GSL_EFAULT\fR
.Sp
Invalid Pointer
.IP "\(bu" 4
\&\f(CW$GSL_EINVAL\fR
.Sp
Invalid argument. This is used to indicate various kinds of problems with passing the wrong argument to a library function (like \s-1EINVAL\s0 in the C library).Invalid argument. This is used to indicate various kinds of problems with passing the wrong argument to a library function (like \s-1EINVAL\s0 in the C library).
.IP "\(bu" 4
\&\f(CW$GSL_EFAILED\fR
.Sp
Generic Failure
.IP "\(bu" 4
\&\f(CW$GSL_EFACTOR\fR
.Sp
Factorization Failed
.IP "\(bu" 4
\&\f(CW$GSL_ESANITY\fR
.Sp
Sanity Check Failed
.IP "\(bu" 4
\&\f(CW$GSL_ENOMEM\fR
.Sp
No memory available. The system cannot allocate more virtual memory because its capacity is full (like \s-1ENOMEM\s0 in the C library). This error is reported when a \s-1GSL\s0 routine encounters problems when trying to allocate memory with malloc.
.IP "\(bu" 4
\&\f(CW$GSL_EBADFUNC\fR
.Sp
Problem with user-supplied function
.IP "\(bu" 4
\&\f(CW$GSL_ERUNAWAY\fR
.Sp
Iterative process is our of control
.IP "\(bu" 4
\&\f(CW$GSL_EMAXITER\fR
.Sp
Exceeded max number of iterations
.IP "\(bu" 4
\&\f(CW$GSL_EZERODIV\fR
.Sp
Division by zero
.IP "\(bu" 4
\&\f(CW$GSL_EBADTOL\fR
.Sp
Invalid user-specified tolerance
.IP "\(bu" 4
\&\f(CW$GSL_ETOL\fR
.Sp
Failed to reach the specified tolerance
.IP "\(bu" 4
\&\f(CW$GSL_EUNDRFLW\fR
.Sp
Underflow
.IP "\(bu" 4
\&\f(CW$GSL_EOVRFLW\fR
.Sp
Overflow
.IP "\(bu" 4
\&\f(CW$GSL_ELOSS\fR
.Sp
Loss of accuracy
.IP "\(bu" 4
\&\f(CW$GSL_EROUND\fR
.Sp
Failed due to roundoff error
.IP "\(bu" 4
\&\f(CW$GSL_EBADLEN\fR
.Sp
Matrix/vector lengths not compatible
.IP "\(bu" 4
\&\f(CW$GSL_ENOTSQR\fR
.Sp
Not a square matrix
.IP "\(bu" 4
\&\f(CW$GSL_ESING\fR
.Sp
Singularity Detected
.IP "\(bu" 4
\&\f(CW$GSL_EDIVERGE\fR
.Sp
Integral/Series is divergent
.IP "\(bu" 4
\&\f(CW$GSL_EUNSUP\fR
.Sp
Not supported by hardware
.IP "\(bu" 4
\&\f(CW$GSL_EUNIMPL\fR
.Sp
Not implemented
.IP "\(bu" 4
\&\f(CW$GSL_ECACHE\fR
.Sp
Cache limit exceeded
.IP "\(bu" 4
\&\f(CW$GSL_ETABLE\fR
.Sp
Table limit exceeded
.IP "\(bu" 4
\&\f(CW$GSL_ENOPROG\fR
.Sp
Iteration not converging
.IP "\(bu" 4
\&\f(CW$GSL_ENOPROGJ\fR
.Sp
Jacobian not improving solution
.IP "\(bu" 4
\&\f(CW$GSL_ETOLF\fR
.Sp
Cannot reach tolerance in F
.IP "\(bu" 4
\&\f(CW$GSL_ETOLX\fR
.Sp
Cannot reach tolerance in X
.IP "\(bu" 4
\&\f(CW$GSL_ETOLG\fR
.Sp
Cannot reach tolerance in Gradient
.IP "\(bu" 4
\&\f(CW$GSL_EOF\fR
.Sp
End of file
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\(bu" 4
gsl_error
.IP "\(bu" 4
gsl_stream_printf
.IP "\(bu" 4
gsl_strerror($gsl_errno) \- This function returns a pointer to a string describing the error code gsl_errno. For example, print (\*(L"error: gsl_strerror ($status)\en\*(R"); would print an error message like error: output range error for a status value of \s-1GSL_ERANGE\s0.
.IP "\(bu" 4
gsl_set_error_handler
.IP "\(bu" 4
\&\fIgsl_set_error_handler_off()\fR \- This function turns off the error handler by defining an error handler which does nothing. This will cause the program to continue after any error, so the return values from any library routines must be checked. This is the recommended behavior for production programs. The previous handler is returned (so that you can restore it later).
.IP "\(bu" 4
gsl_set_stream_handler
.IP "\(bu" 4
gsl_set_stream
